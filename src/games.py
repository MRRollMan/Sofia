import configparser
import aiosqlite
import datetime
import aiocache
import aiogram
import logging
import asyncio
import random
import math

from src.functions import add_chat, check_type, reply_and_delete, send_and_delete, edit_and_delete, check_settings
from aiogram.types import CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.utils.exceptions import MessageCantBeDeleted, MessageToDeleteNotFound
from datetime import datetime, timedelta, time
from aiogram import Bot, types

# –Ü–º–ø–æ—Ä—Ç—É—î–º–æ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ–π–Ω–∏–π —Ñ–∞–π–ª
config = configparser.ConfigParser()
try:
    config.read('config.ini')
    TOKEN = config['TOKEN']['BOT']
    TEST = (config['SETTINGS']['TEST'])
    RANDOMGAMES = float(config['SETTINGS']['RANDOMGAMES'])
    DELETE = int(config['SETTINGS']['DELETE'])
except (FileNotFoundError, KeyError) as e:
    logging.error(f"–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ–π–Ω–æ–≥–æ —Ñ–∞–π–ª—É –≤ games.py: {e}")
    exit()

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞ —Ç–∞ –∫–µ—à-–ø–∞–º'—è—Ç—ñ
bot = Bot(token=TOKEN)
cache = aiocache.Cache()


# /game
async def game(message: types.Message):
    chat_id = message.chat.id

    if not await check_settings(chat_id, 'minigame'):
        return

    if await check_type(message):
        return

    user_id = message.from_user.id
    chat_id = message.chat.id
    mention = ('[' + message.from_user.username + ']' + '(https://t.me/' + message.from_user.username + ')') if message.from_user.username else message.from_user.first_name

    async with aiosqlite.connect('src/database.db') as db:
        cursor = await db.execute("SELECT game FROM cooldowns WHERE user_id = ? AND chat_id = ?", (user_id, chat_id))
        last_played = await cursor.fetchone()

        if last_played and last_played[0]:
            last_played = datetime.strptime(last_played[0], "%Y-%m-%d %H:%M:%S")
            cooldown = timedelta(hours=2)
            if datetime.now() < last_played + cooldown:
                time_left = last_played + cooldown - datetime.now()
                cooldown_time = str(time_left).split(".")[0]
                await reply_and_delete(message, f"‚ÑπÔ∏è –¢–∏ —â–µ –Ω–µ –º–æ–∂–µ—à –≥—Ä–∞—Ç–∏. –°–ø—Ä–æ–±—É–π —á–µ—Ä–µ–∑ `{cooldown_time}`")
                return 

        cursor = await db.execute("SELECT value FROM user_values WHERE user_id = ? AND chat_id = ?", (user_id, chat_id))
        balance = await cursor.fetchone()
        if balance:
            balance = balance[0]
        else:
            balance = 0

        if balance <= 0:
            await reply_and_delete(message,f"‚ÑπÔ∏è –£ —Ç–µ–±–µ `{balance}` –∫–≥. –¶—å–æ–≥–æ –Ω–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ")
            return
        await cache.set(f"initial_balance_{user_id}_{chat_id}", balance)

        keyboard = InlineKeyboardMarkup(row_width=2)
        bet_buttons = [InlineKeyboardButton(f"{bet} –∫–≥", callback_data=f"bet_{bet}") for bet in [1, 5, 10, 20, 30, 40, 50, 100]]
        bet_buttons.append(InlineKeyboardButton("‚ùå –í–∏–π—Ç–∏", callback_data="cancel"))
        keyboard.add(*bet_buttons)
        game_message = await bot.send_message(chat_id, f"üßå {mention}, –∑–Ω–∞–π–¥–∏ —ñ –≤–±–∏–π –º–æ—Å–∫–∞–ª—è\n–í–∏–±–µ—Ä–∏ —Å—Ç–∞–≤–∫—É\n\nüè∑Ô∏è –£ —Ç–µ–±–µ: `{balance}` –∫–≥", reply_markup=keyboard, parse_mode="Markdown", disable_web_page_preview=True)
        await cache.set(f"game_player_{game_message.message_id}", message.from_user.id)
        await asyncio.sleep(DELETE)
        try:
            await bot.delete_message(chat_id, message.message_id)
        except (MessageCantBeDeleted, MessageToDeleteNotFound):
            pass

async def handle_game_buttons(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    chat_id = callback_query.message.chat.id
    game_player_id = await cache.get(f"game_player_{callback_query.message.message_id}")

    if game_player_id != user_id:
        await bot.answer_callback_query(callback_query.id, "‚ùå –¶—ñ –∫–Ω–æ–ø–æ—á–∫–∏ –Ω–µ –¥–ª—è —Ç–µ–±–µ!", show_alert=True)
        return

    async with aiosqlite.connect('src/database.db') as db:
        if callback_query.data == 'cancel':
            await bot.answer_callback_query(callback_query.id, "‚ÑπÔ∏è –°–∫–∞—Å–æ–≤—É—é –≥—Ä—É..")
            await edit_and_delete(bot, chat_id, callback_query.message.message_id, "‚ÑπÔ∏è –ì—Ä—É —Å–∫–∞—Å–æ–≤–∞–Ω–æ")
            return


        elif callback_query.data.startswith('bet_'):
            _, bet = callback_query.data.split('_')
            bet = int(bet)

            cursor = await db.execute("SELECT game FROM cooldowns WHERE user_id = ? AND chat_id = ?", (user_id, chat_id))
            last_played = await cursor.fetchone()
            if last_played and last_played[0]:
                last_played = datetime.strptime(last_played[0], "%Y-%m-%d %H:%M:%S")
                cooldown = timedelta(hours=2)
                if datetime.now() < last_played + cooldown:
                    time_left = last_played + cooldown - datetime.now()
                    cooldown_time = str(time_left).split(".")[0]
                    await bot.answer_callback_query(callback_query.id, "‚ÑπÔ∏è –°–ø—Ä–æ–±—É–π –ø—ñ–∑–Ω—ñ—à–µ")
                    await edit_and_delete(bot, chat_id, callback_query.message.message_id, f"‚ÑπÔ∏è –¢–∏ —â–µ –Ω–µ –º–æ–∂–µ—à –≥—Ä–∞—Ç–∏. –°–ø—Ä–æ–±—É–π —á–µ—Ä–µ–∑ `{cooldown_time}`")
                    return

            initial_balance = await cache.get(f"initial_balance_{user_id}_{chat_id}")
            if initial_balance is None or int(initial_balance) < bet:
                await bot.answer_callback_query(callback_query.id, "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ —Ä—É—Å–æ—Ñ–æ–±—ñ—ó")
                return

            new_balance = int(initial_balance) - bet
            await db.execute("UPDATE user_values SET value = ? WHERE user_id = ? AND chat_id = ?", (new_balance, user_id, chat_id))
            await db.commit()

            await cache.set(f"bet_{user_id}_{chat_id}", str(bet))
            potential_win = bet * 2

            keyboard = InlineKeyboardMarkup(row_width=3)
            cell_buttons = [InlineKeyboardButton("üßå", callback_data=f"cell_{i}") for i in range(1, 10)]
            cell_buttons.append(InlineKeyboardButton("‚ùå –í—ñ–¥–º—ñ–Ω–∞", callback_data="cancel_cell"))
            keyboard.add(*cell_buttons)
            mention = ('[' + callback_query.from_user.username + ']' + '(https://t.me/' + callback_query.from_user.username + ')') if callback_query.from_user.username else callback_query.from_user.first_name
            await bot.answer_callback_query(callback_query.id, "‚ÑπÔ∏è –°—Ç–∞–≤–∫–∞ –ø—Ä–∏–π–Ω—è—Ç–∞")
            await bot.edit_message_text(
                f"üßå {mention}, –∑–Ω–∞–π–¥–∏ –º–æ—Å–∫–∞–ª—è:\n\n"
                f"üè∑Ô∏è –¢–≤–æ—è —Å—Ç–∞–≤–∫–∞: `{bet} –∫–≥`\n"
                f"üí∞ –ú–æ–∂–ª–∏–≤–∏–π –≤–∏–≥—Ä–∞—à: `{potential_win} –∫–≥`", chat_id=chat_id, message_id=callback_query.message.message_id, reply_markup=keyboard, parse_mode="Markdown", disable_web_page_preview=True)

        elif callback_query.data.startswith('cancel_cell'):
            bet = await cache.get(f"bet_{user_id}_{chat_id}")
            bet = int(bet)
            cursor = await db.execute("SELECT value FROM user_values WHERE user_id = ? AND chat_id = ?", (user_id, chat_id))
            current_balance = await cursor.fetchone()
            current_balance = current_balance[0] if current_balance else 0
            new_balance = current_balance + bet
            await db.execute("UPDATE user_values SET value = ? WHERE user_id = ? AND chat_id = ?", (new_balance, user_id, chat_id))
            await db.commit()

            await bot.answer_callback_query(callback_query.id, "‚ÑπÔ∏è –°–∫–∞—Å–æ–≤—É—é –≥—Ä—É..")
            await edit_and_delete(bot, chat_id, callback_query.message.message_id, f"‚ÑπÔ∏è –ì—Ä—É —Å–∫–∞—Å–æ–≤–∞–Ω–æ. –¢–≤–æ—ó `{bet} –∫–≥` –ø–æ–≤–µ—Ä–Ω—É—Ç–æ")
            return

        elif callback_query.data.startswith('cell_'):
            _, cell = callback_query.data.split('_')
            cell = int(cell)

            cursor = await db.execute("SELECT game FROM cooldowns WHERE user_id = ? AND chat_id = ?", (user_id, chat_id))
            last_played = await cursor.fetchone()
            if last_played and last_played[0]:
                last_played = datetime.strptime(last_played[0], "%Y-%m-%d %H:%M:%S")
                cooldown = timedelta(hours=2)
                if datetime.now() < last_played + cooldown:
                    time_left = last_played + cooldown - datetime.now()
                    cooldown_time = str(time_left).split(".")[0]
                    await bot.answer_callback_query(callback_query.id, "‚ÑπÔ∏è –°–ø—Ä–æ–±—É–π –ø—ñ–∑–Ω—ñ—à–µ")
                    await edit_and_delete(bot, chat_id, callback_query.message.message_id, f"‚ÑπÔ∏è –¢–∏ —â–µ –Ω–µ –º–æ–∂–µ—à –≥—Ä–∞—Ç–∏. –°–ø—Ä–æ–±—É–π —á–µ—Ä–µ–∑ `{cooldown_time}`")
                    return

            mention = ('[' + callback_query.from_user.username + ']' + '(https://t.me/' + callback_query.from_user.username + ')') if callback_query.from_user.username else callback_query.from_user.first_name

            cursor = await db.execute("SELECT value FROM user_values WHERE user_id = ? AND chat_id = ?", (user_id, chat_id))
            balance_after_bet = await cursor.fetchone()
            balance_after_bet = balance_after_bet[0] if balance_after_bet else 0
            bet = await cache.get(f"bet_{user_id}_{chat_id}")
            bet = int(bet)
            win = random.random() < RANDOMGAMES

            if win:
                bet_won = math.ceil(bet * 1.5)
                new_balance = balance_after_bet + bet_won + bet
                await db.execute("UPDATE user_values SET value = ? WHERE user_id = ? AND chat_id = ?", (new_balance, user_id, chat_id))
                message = f"üèÜ {mention}, —Ç–∏ –≤–∏–≥—Ä–∞–≤(–ª–∞)! –¢–∏ –∑–Ω–∞–π—à–æ–≤ —ñ –≤–±–∏–≤ –º–æ—Å–∫–∞–ª—è, –∑ –Ω—å–æ–≥–æ –≤–∏–ø–∞–ª–æ `{bet_won}` –∫–≥ üßå\nüè∑Ô∏è –¢–µ–ø–µ—Ä —É —Ç–µ–±–µ: `{new_balance}` –∫–≥"
            else:
                message = f"üòî {mention}, —Ç–∏ –ø—Ä–æ–≥—Ä–∞–≤(–ª–∞) `{bet}` –∫–≥ üßå\nüè∑Ô∏è –¢–µ–ø–µ—Ä —É —Ç–µ–±–µ: `{balance_after_bet}` –∫–≥"

            if TEST == 'False':
                now = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
                await db.execute("UPDATE cooldowns SET game = ? WHERE user_id = ? AND chat_id = ?", (now, user_id, chat_id))
            
            await db.commit()
            wait = "üßå –¢–∏–∫–∞—î–º–æ –ø–∞–ª–∏—Ü–µ—é –≤ —Ç—Ä—É–ø, –∑–¥–æ—Ö —á–∏ –Ω–µ.."
            await bot.edit_message_text(wait, chat_id=chat_id, message_id=callback_query.message.message_id, parse_mode="Markdown", disable_web_page_preview=True)
            await asyncio.sleep(4)
            await bot.answer_callback_query(callback_query.id, "‚ÑπÔ∏è –ì—Ä—É –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
            await bot.edit_message_text(message, chat_id=chat_id, message_id=callback_query.message.message_id, parse_mode="Markdown", disable_web_page_preview=True)


# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –æ–±—Ä–æ–±–Ω–∏–∫–∞
def games_handlers(dp, bot):
    dp.register_message_handler(game, commands=['game'])