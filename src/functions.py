import aiosqlite
import asyncio

import aiosqlite
from aiogram import types


# TODO: Refactor all functions and remove unused

# –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö SQLite —ñ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—å
async def setup_database():
    async with aiosqlite.connect('src/database.db') as db:
        await db.execute('''CREATE TABLE IF NOT EXISTS user_values (user_id INTEGER, chat_id INTEGER, value INTEGER, PRIMARY KEY(user_id, chat_id))''')
        await db.execute('''CREATE TABLE IF NOT EXISTS cooldowns (user_id INTEGER, chat_id INTEGER, killru TIMESTAMP, give TIMESTAMP, game TIMESTAMP, dice TIMESTAMP, darts TIMESTAMP, basketball TIMESTAMP, football TIMESTAMP, bowling TIMESTAMP, casino TIMESTAMP, PRIMARY KEY(user_id, chat_id))''')
        await db.execute('CREATE TABLE IF NOT EXISTS chats (chat_id INTEGER PRIMARY KEY, minigame BOOLEAN , give BOOLEAN)')
        await db.execute('''CREATE TABLE IF NOT EXISTS queries (id INTEGER PRIMARY KEY, datetime TIMESTAMP NOT NULL, count INTEGER NOT NULL DEFAULT 0)''')
        await db.commit()

# –§—É–Ω–∫—Ü—ñ—è –ø—ñ–¥ —á–∞—Å —Å—Ç–∞—Ä—Ç—É
async def startup(dp):
    await setup_database()
    commands = [
        types.BotCommand(command="/killru", description="–°–ø—Ä–æ–±—É–≤–∞—Ç–∏ –ø—ñ–¥–≤–∏—â–∏—Ç–∏ —Å–≤–æ—é —Ä—É—Å–æ—Ñ–æ–±—ñ—é"),
        types.BotCommand(command="/my", description="–ú–æ—è —Ä—É—Å–æ—Ñ–æ–±—ñ—è"),
        types.BotCommand(command="/game", description="–ó–Ω–∞–π–¥–∏ —ñ –≤–±–∏–π –º–æ—Å–∫–∞–ª—è"),
        types.BotCommand(command="/dice", description="–ú—ñ–Ω—ñ –≥—Ä–∞, –∫–∏–Ω—å –∫—ñ—Å—Ç–∫–∏"),
        types.BotCommand(command="/darts", description="–ì—Ä–∞ –≤ –¥–∞—Ä—Ç—Å"),
        types.BotCommand(command="/basketball", description="–ì—Ä–∞ –≤ –±–∞—Å–∫–µ—Ç–±–æ–ª"),
        types.BotCommand(command="/football", description="–ì—Ä–∞ —É —Ñ—É—Ç–±–æ–ª"),
        types.BotCommand(command="/bowling", description="–ì—Ä–∞ –≤ –±–æ—É–ª—ñ–Ω–≥"),
        types.BotCommand(command="/casino", description="–ì—Ä–∞ –≤ –∫–∞–∑–∏–Ω–æ"),
        types.BotCommand(command="/help", description="–î–æ–ø–æ–º–æ–≥–∞"),
        types.BotCommand(command="/settings", description="–¢—ñ–ª—å–∫–∏ –¥–ª—è –∞–¥–º—ñ–Ω—ñ–≤ —á–∞—Ç—É"),
        types.BotCommand(command="/give", description="–ü–æ–¥—ñ–ª–∏—Ç—å—Å—è —Ä—É—Å–æ—Ñ–æ–±—ñ—î—é"),
        types.BotCommand(command="/top10", description="–¢–æ–ø 10 –≥—Ä–∞–≤—Ü—ñ–≤"),
        types.BotCommand(command="/top", description="–¢–æ–ø –≥—Ä–∞–≤—Ü—ñ–≤"),
        types.BotCommand(command="/globaltop10", description="–¢–æ–ø 10 —Å–µ—Ä–µ–¥ –≤—Å—ñ—Ö –≥—Ä–∞–≤—Ü—ñ–≤"),
        types.BotCommand(command="/globaltop", description="–¢–æ–ø –≤—Å—ñ—Ö –≥—Ä–∞–≤—Ü—ñ–≤"),
        types.BotCommand(command="/leave", description="–ü–æ–∫–∏–Ω—É—Ç–∏ –≥—Ä—É"),
        types.BotCommand(command="/about", description="–ü—Ä–æ –±–æ—Ç–∞"),
        types.BotCommand(command="/ping", description="–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞"),
        ]
    await dp.bot.set_my_commands(commands)
    if STATUS == 'True':
        try:
            await dp.bot.send_message(CHANNEL, f"üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–∏–π", parse_mode="Markdown")
        except Exception as e:
            print(f"–°—Ç–∞—Ä—Ç error: {e}")

# –§—É–Ω–∫—Ü—ñ—è –ø—ñ–¥ —á–∞—Å –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è
async def shutdown(dp):
    if STATUS == 'True':
        try:
            await dp.bot.send_message(CHANNEL, f"‚õîÔ∏è –ë–æ—Ç –∑—É–ø–∏–Ω–µ–Ω–∏–π", parse_mode="Markdown")
        except Exception as e:
            print(f"–°—Ç–æ–ø error: {e}")


# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å
async def check_settings(chat_id: int, setting: str) -> bool:
    async with aiosqlite.connect('src/database.db') as db:
        async with db.execute(f'SELECT {setting} FROM chats WHERE chat_id = ?', (chat_id,)) as cursor:
            result = await cursor.fetchone()
            return result is None or result[0] is None or result[0]

# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª, –ø–ø —Ç–∞ –±–æ—Ç—ñ–≤
async def check_type(message: types.Message):
    if (message.from_user.is_bot or message.chat.type in ['channel', 'private'] or (message.reply_to_message and message.reply_to_message.from_user.id == 777000)):
        
        reply_message = await message.reply("‚ÑπÔ∏è –ö–æ–º–∞–Ω–¥–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è –∫–∞–Ω–∞–ª—ñ–≤, –±–æ—Ç—ñ–≤ —ñ –≤ –æ—Å–æ–±–∏—Å—Ç–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è—Ö")
        await asyncio.sleep(DELETE)
        try:
            await bot.delete_message(chat_id=message.chat.id, message_id=reply_message.message_id)
            await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
        except (MessageCantBeDeleted, MessageToDeleteNotFound):
            pass
        return True
    return False
