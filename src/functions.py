# –Ü–º–ø–æ—Ä—Ç–∏
import configparser
import aiosqlite
import datetime
import asyncio
import aiogram
from aiogram.utils.exceptions import MessageToDeleteNotFound, MessageCantBeDeleted, BadRequest
from aiogram import Bot, Dispatcher, types
from datetime import datetime


# –Ü–º–ø–æ—Ä—Ç—É—î–º–æ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ–π–Ω–∏–π —Ñ–∞–π–ª
config = configparser.ConfigParser()
try:
    config.read('config.ini')
    TOKEN = config['TOKEN']['BOT']
    ADMIN = int(config['ID']['ADMIN'])
    support_str = config['ID']['SUPPORT']
    CHANNEL= int(config['ID']['CHANNEL'])
    TEST = (config['SETTINGS']['TEST'])
    STATUS = (config['SETTINGS']['STATUS'])
    DELETE = int(config['SETTINGS']['DELETE'])
except (FileNotFoundError, KeyError) as e:
    logging.error(f"–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ–π–Ω–æ–≥–æ —Ñ–∞–π–ª—É –≤ functions.py: {e}")
    exit()


# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞ —ñ –æ–±—Ä–æ–±–Ω–∏–∫–∞
bot = Bot(token=TOKEN)
dp = Dispatcher(bot)


# –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö SQLite —ñ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—å
async def setup_database():
    async with aiosqlite.connect('src/database.db') as db:
        await db.execute('''CREATE TABLE IF NOT EXISTS user_values (user_id INTEGER, chat_id INTEGER, value INTEGER, PRIMARY KEY(user_id, chat_id))''')
        await db.execute('''CREATE TABLE IF NOT EXISTS cooldowns (user_id INTEGER, chat_id INTEGER, killru TIMESTAMP, give TIMESTAMP, game TIMESTAMP, dice TIMESTAMP, darts TIMESTAMP, basketball TIMESTAMP, football TIMESTAMP, bowling TIMESTAMP, casino TIMESTAMP, PRIMARY KEY(user_id, chat_id))''')
        await db.execute('CREATE TABLE IF NOT EXISTS chats (chat_id INTEGER PRIMARY KEY, minigame BOOLEAN , give BOOLEAN)')
        await db.execute('''CREATE TABLE IF NOT EXISTS queries (id INTEGER PRIMARY KEY, datetime TIMESTAMP NOT NULL, count INTEGER NOT NULL DEFAULT 0)''')
        await db.commit()


# –§—É–Ω–∫—Ü—ñ—è –ø—ñ–¥ —á–∞—Å —Å—Ç–∞—Ä—Ç—É
async def startup(dp):
    await setup_database()
    commands = [
        types.BotCommand(command="/killru", description="–°–ø—Ä–æ–±—É–≤–∞—Ç–∏ –ø—ñ–¥–≤–∏—â–∏—Ç–∏ —Å–≤–æ—é —Ä—É—Å–æ—Ñ–æ–±—ñ—é"),
        types.BotCommand(command="/my", description="–ú–æ—è —Ä—É—Å–æ—Ñ–æ–±—ñ—è"),
        types.BotCommand(command="/game", description="–ó–Ω–∞–π–¥–∏ —ñ –≤–±–∏–π –º–æ—Å–∫–∞–ª—è"),
        types.BotCommand(command="/dice", description="–ú—ñ–Ω—ñ –≥—Ä–∞, –∫–∏–Ω—å –∫—ñ—Å—Ç–∫–∏"),
        types.BotCommand(command="/darts", description="–ì—Ä–∞ –≤ –¥–∞—Ä—Ç—Å"),
        types.BotCommand(command="/basketball", description="–ì—Ä–∞ –≤ –±–∞—Å–∫–µ—Ç–±–æ–ª"),
        types.BotCommand(command="/football", description="–ì—Ä–∞ —É —Ñ—É—Ç–±–æ–ª"),
        types.BotCommand(command="/bowling", description="–ì—Ä–∞ –≤ –±–æ—É–ª—ñ–Ω–≥"),
        types.BotCommand(command="/casino", description="–ì—Ä–∞ –≤ –∫–∞–∑–∏–Ω–æ"),
        types.BotCommand(command="/help", description="–î–æ–ø–æ–º–æ–≥–∞"),
        types.BotCommand(command="/give", description="–ü–æ–¥—ñ–ª–∏—Ç—å—Å—è —Ä—É—Å–æ—Ñ–æ–±—ñ—î—é"),
        types.BotCommand(command="/top10", description="–¢–æ–ø 10 –≥—Ä–∞–≤—Ü—ñ–≤"),
        types.BotCommand(command="/top", description="–¢–æ–ø –≥—Ä–∞–≤—Ü—ñ–≤"),
        types.BotCommand(command="/globaltop", description="–¢–æ–ø –≤—Å—ñ—Ö –≥—Ä–∞–≤—Ü—ñ–≤"),
        types.BotCommand(command="/leave", description="–ü–æ–∫–∏–Ω—É—Ç–∏ –≥—Ä—É"),
        types.BotCommand(command="/about", description="–ü—Ä–æ –±–æ—Ç–∞"),
        types.BotCommand(command="/ping", description="–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞"),
        ]
    await dp.bot.set_my_commands(commands)
    if STATUS == 'True':
        try:
            await dp.bot.send_message(CHANNEL, f"üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–∏–π", parse_mode="Markdown")
        except Exception as e:
            print(f"–°—Ç–∞—Ä—Ç error: {e}")


# –§—É–Ω–∫—Ü—ñ—è –ø—ñ–¥ —á–∞—Å –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è
async def shutdown(dp):
    if STATUS == 'True':
        try:
            await dp.bot.send_message(CHANNEL, f"‚õîÔ∏è –ë–æ—Ç –∑—É–ø–∏–Ω–µ–Ω–∏–π", parse_mode="Markdown")
        except Exception as e:
            print(f"–°—Ç–æ–ø error: {e}")


# –î–æ–¥–∞—î chat_id —É –±–∞–∑—É –¥–∞–Ω–∏—Ö –¥–ª—è —Ä–æ–∑—Å–∏–ª–∫–∏
async def add_chat(chat_id):
    async with aiosqlite.connect('src/database.db') as db:
        await db.execute('INSERT OR IGNORE INTO chats (chat_id) VALUES (?)', (chat_id,))
        await db.commit()


# –í–∏–¥–∞–ª—è—î chat_id —ñ–∑ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö –¥–ª—è —Ä–æ–∑—Å–∏–ª–∫–∏
async def remove_chat(chat_id):
    async with aiosqlite.connect('src/database.db') as db:
        await db.execute('DELETE FROM chats WHERE chat_id = ?', (chat_id,))
        await db.commit()


# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –∞–¥–º—ñ–Ω–∞
async def admin(message: types.Message):
    if message.from_user.id != ADMIN:
        return False
    return True


# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –∞–¥–º—ñ–Ω–∞ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏
async def supportusers(message: types.Message):
    SUPPORT = [int(id.strip()) for id in support_str.split(',')]
    if message.from_user.id not in SUPPORT:
        return False
    return True


# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å
async def check_settings(chat_id: int, setting: str) -> bool:
    async with aiosqlite.connect('src/database.db') as db:
        async with db.execute(f'SELECT {setting} FROM chats WHERE chat_id = ?', (chat_id,)) as cursor:
            result = await cursor.fetchone()
            return result is None or result[0] is None or result[0]

# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª —ñ –ø–ø
async def check_type(message: types.Message):
    if (message.from_user.is_bot or message.chat.type in ['channel', 'private'] or (message.reply_to_message and message.reply_to_message.from_user.id == 777000)):
        
        reply_message = await message.reply("‚ö†Ô∏è –ö–æ–º–∞–Ω–¥–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è –∫–∞–Ω–∞–ª—ñ–≤, –±–æ—Ç—ñ–≤ —ñ –≤ –æ—Å–æ–±–∏—Å—Ç–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è—Ö")
        await asyncio.sleep(DELETE)
        try:
            await bot.delete_message(chat_id=message.chat.id, message_id=reply_message.message_id)
            await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
        except (MessageCantBeDeleted, MessageToDeleteNotFound):
            pass
        return True
    return False


# –í–∏–≤–µ–¥–µ–Ω–Ω—è —Ç–æ–ø–∞
async def show_top(message: types.Message, limit: int, title: str):
    chat_id = message.chat.id
    total_kg = 0

    async with aiosqlite.connect('src/database.db') as db:
        async with db.execute(
            'SELECT user_id, value FROM user_values WHERE chat_id = ? AND value != 0 ORDER BY value DESC LIMIT ?',
            (chat_id, limit)
        ) as cursor:
            results = await cursor.fetchall()

        if results:
            total_kg = sum([value for _, value in results])

    if not results:
        await reply_and_delete(message, 'üòØ –©–µ –Ω—ñ—Ö—Ç–æ –Ω–µ –≥—Ä–∞–≤')
    else:
        async def username(chat_id, user_id):
            try:
                user_info = await bot.get_chat_member(chat_id, user_id)
                if user_info.user.username:
                    return f'[{user_info.user.username}](https://t.me/{user_info.user.username})'
                else:
                    return user_info.user.full_name
            except BadRequest:
                return None

        tasks = [username(chat_id, user_id) for user_id, _ in results]
        user_names = await asyncio.gather(*tasks)

        message_text = f'{title}:\nüü∞ –£—Å—å–æ–≥–æ: {total_kg} –∫–≥\n\n'
        count = 0
        for user_name, (_, rusophobia) in zip(user_names, results):
            if user_name:
                count += 1
                message_text += f'{count}. {user_name}: {rusophobia} –∫–≥\n'

        await reply_and_delete(message, message_text)


# –í–∏–≤–µ–¥–µ–Ω–Ω—è –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —Ç–æ–ø–∞
async def show_globaltop(message: types.Message, limit: int, title: str):
    total_kg = 0

    async with aiosqlite.connect('src/database.db') as db:
        async with db.execute(
            'SELECT user_id, MAX(value) as max_value FROM user_values WHERE value != 0 GROUP BY user_id ORDER BY max_value DESC LIMIT ?',
            (limit,)
        ) as cursor:
            results = await cursor.fetchall()

        if results:
            total_kg = sum([value for _, value in results])

    if not results:
        await reply_and_delete(message, 'üòØ –©–µ –Ω—ñ—Ö—Ç–æ –Ω–µ –≥—Ä–∞–≤')
    else:
        async def get_username(user_id):
            try:
                user_info = await bot.get_chat(user_id)
                if user_info.username:
                    return f'[{user_info.username}](https://t.me/{user_info.username})'
                else:
                    return user_info.first_name
            except BadRequest:
                return None

        tasks = [get_username(user_id) for user_id, _ in results]
        user_names = await asyncio.gather(*tasks)

        message_text = f'{title}:\nüü∞ –£—Å—å–æ–≥–æ: {total_kg} –∫–≥\n\n'
        count = 0
        for user_name, (_, rusophobia) in zip(user_names, results):
            if user_name:
                count += 1
                message_text += f'{count}. {user_name}: {rusophobia} –∫–≥\n'

        await reply_and_delete(message, message_text)


# –í—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —Ç–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è
async def reply_and_delete(message: types.Message, reply_text):
    text = await message.reply(reply_text, parse_mode="Markdown", disable_web_page_preview=True)
    await asyncio.sleep(DELETE)
    try:
        await bot.delete_message(chat_id=message.chat.id, message_id=text.message_id)
        await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
    except (MessageCantBeDeleted, MessageToDeleteNotFound):
        pass
    return


# –ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —Ç–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è —ñ—Å—Ö–æ–¥–Ω–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
async def send_and_delete(message: types.Message, chat_id, reply_text):
    text = await bot.send_message(chat_id=message.chat.id, text=reply_text, parse_mode="Markdown", disable_web_page_preview=True)
    await asyncio.sleep(DELETE)
    try:
        await bot.delete_message(chat_id=chat_id, message_id=message.message_id)
    except (MessageCantBeDeleted, MessageToDeleteNotFound):
        pass
    return


# –†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è —Ç–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
async def edit_and_delete(message: types.Message, chat_id, message_id, reply_text):
    await bot.edit_message_text(chat_id=chat_id, message_id=message_id, text=reply_text, parse_mode="Markdown", disable_web_page_preview=True)
    await asyncio.sleep(DELETE)
    try:
        await bot.delete_message(chat_id, message_id)
    except (MessageCantBeDeleted, MessageToDeleteNotFound):
        pass
    return