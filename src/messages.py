import configparser
import aiosqlite
import aiocache
import aiogram
import logging
import asyncio
import psutil

from src.functions import reply_and_delete, show_globaltop, show_top, check_type, edit_and_delete, check_settings
from aiogram.types import CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.utils.exceptions import MessageCantBeDeleted, MessageToDeleteNotFound
from datetime import datetime, timedelta
from aiogram import Bot, types

# –Ü–º–ø–æ—Ä—Ç—É—î–º–æ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ–π–Ω–∏–π —Ñ–∞–π–ª
config = configparser.ConfigParser()
try:
    config.read('config.ini')
    TOKEN = config['TOKEN']['BOT']
    ADMIN = int(config['ID']['ADMIN'])
    TEST = (config['SETTINGS']['TEST'])
    VERSION = (config['SETTINGS']['VERSION'])
    DELETE = int(config['SETTINGS']['DELETE'])
except (FileNotFoundError, KeyError) as e:
    logging.error(f"–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ–π–Ω–æ–≥–æ —Ñ–∞–π–ª—É –≤ messages.py: {e}")
    exit()

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞ —Ç–∞ –∫–µ—à-–ø–∞–º'—è—Ç—ñ
bot = Bot(token=TOKEN)
cache = aiocache.Cache()

# /start
async def start(message: types.Message):
    await reply_and_delete(message, "ü´° –ü—Ä–∏–≤—ñ—Ç. –Ø –±–æ—Ç –¥–ª—è –≥—Ä–∏ –≤ —Ä—É—Å–æ—Ñ–æ–±—ñ—é. –î–æ–¥–∞–≤–∞–π –º–µ–Ω–µ –≤ —á–∞—Ç —ñ —Ä–æ–∑–≤–∞–∂–∞–π—Å—è. –©–æ–± –¥—ñ–∑–Ω–∞—Ç–∏—Å—è —è–∫ –º–Ω–æ—é –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ç–∏—Å—è, –≤–∏–≤—á–∞–π /help")

# /ping
bot_start_time = datetime.now()

def format_uptime(uptime):
    days, remainder = divmod(uptime.total_seconds(), 86400)
    hours, remainder = divmod(remainder, 3600)
    minutes, seconds = divmod(remainder, 60)
    if days > 0:
        return f"{int(days)} –¥. {int(hours):02d}:{int(minutes):02d}:{int(seconds):02d}"
    else:
        return f"{int(hours):02d}:{int(minutes):02d}:{int(seconds):02d}"

async def ping(message: types.Message):
    start_time = datetime.now()
    await bot.get_me()
    end_time = datetime.now()
    ping_time = (end_time - start_time).total_seconds() * 1000
    cpu_usage = psutil.cpu_percent(interval=1)
    ram_usage = psutil.virtual_memory().percent
    now = datetime.now()
    uptime = now - bot_start_time
    formatted_uptime = format_uptime(uptime)
    start_of_today = now.replace(hour=0, minute=0, second=0, microsecond=0)
    start_of_week = start_of_today - timedelta(days=now.weekday())

    async with aiosqlite.connect('src/database.db') as db:
        async with db.execute('SELECT count FROM queries WHERE datetime >= ? AND datetime < ? ORDER BY datetime DESC LIMIT 1', (start_time.replace(hour=0, minute=0, second=0, microsecond=0), start_time.replace(hour=23, minute=59, second=59, microsecond=999999))) as cursor:
            today_record = await cursor.fetchone()
            today_queries = today_record[0] if today_record else 0

        period_start = start_of_today if now.weekday() == 0 else start_of_week
        async with db.execute('SELECT SUM(count) FROM queries WHERE datetime >= ?', (period_start,)) as cursor:
            week_record = await cursor.fetchone()
            week_queries = week_record[0] if week_record else 0

        async with db.execute('SELECT SUM(count) FROM queries') as cursor:
            all_time_record = await cursor.fetchone()
            all_time_queries = all_time_record[0] if all_time_record else 0

    ping_text = (
        f"üì° Ping: `{ping_time:.2f}` ms\n\n"
        f"üî• CPU: `{cpu_usage}%`\n"
        f"üíæ RAM: `{ram_usage}%`\n"
        f"‚è±Ô∏è Uptime: `{formatted_uptime}`\n\n"
        f"üìä –ö—ñ–ª—å–∫—ñ—Å—Ç—å –∑–∞–ø–∏—Ç—ñ–≤:\n"
        f"_–ó–∞ —Å—å–æ–≥–æ–¥–Ω—ñ:_ `{today_queries}`\n"
        f"_–ó–∞ —Ç–∏–∂–¥–µ–Ω—å:_ `{week_queries}`\n"
        f"_–ó–∞ –≤–µ—Å—å —á–∞—Å:_ `{all_time_queries}`")

    await reply_and_delete(message, ping_text)

# /about
async def about(message: types.Message):
    about_text = (
        f"üì° Sofia `{VERSION}`\n\n"
        f"[News Channel](t.me/SofiaBotRol)\n"
        f"[Source](https://github.com/onilyxe/Sofia)\n\n"
        f"Made [onilyxe](https://t.me/onilyxe). Idea [den](https://t.me/itsokt0cry)")

    await reply_and_delete(message, about_text)

# /globaltop
async def globaltop(message: types.Message):
    await show_globaltop(message, limit=101, title='üåè –ì–ª–æ–±–∞–ª—å–Ω–∏–π —Ç–æ–ø —Ä—É—Å–æ—Ñ–æ–±—ñ–π')

# /globaltop10
async def globaltop10(message: types.Message):
    await show_globaltop(message, limit=10, title='üåè –ì–ª–æ–±–∞–ª—å–Ω–∏–π —Ç–æ–ø 10 —Ä—É—Å–æ—Ñ–æ–±—ñ–π')

# /top
async def top(message: types.Message):
    await show_top(message, limit=101, title='üìä –¢–æ–ø —Ä—É—Å–æ—Ñ–æ–±—ñ–π —á–∞—Ç—É')

# /top10
async def top10(message: types.Message):
    await show_top(message, limit=10, title='üìä –¢–æ–ø 10 —Ä—É—Å–æ—Ñ–æ–±—ñ–π —á–∞—Ç—É')

# /my
async def my(message: types.Message):
    if await check_type(message):
        return

    user_id = message.from_user.id
    chat_id = message.chat.id

    async with aiosqlite.connect('src/database.db') as db:
        cursor = await db.execute('SELECT value FROM user_values WHERE user_id = ? AND chat_id = ?', (user_id, chat_id))
        result = await cursor.fetchone()

    if message.from_user.username:
        mention = f"[{message.from_user.username}](https://t.me/{message.from_user.username})"
    else:
        mention = message.from_user.first_name

    if result is None:
        await reply_and_delete(message, f'üò† {mention}, —É —Ç–µ–±–µ –Ω–µ–º–∞—î —Ä—É—Å–æ—Ñ–æ–±—ñ—ó, –≥—É–±–∏—Å—è')
    else:
        rusophobia = result[0]
        await reply_and_delete(message, f"üò° {mention}, —Ç–≤–æ—è —Ä—É—Å–æ—Ñ–æ–±—ñ—è: `{rusophobia}` –∫–≥")

# /settings
async def settings(message: types.Message):
    chat_id = message.chat.id

    user = await bot.get_chat_member(chat_id, message.from_user.id)
    if not user.status in ['administrator', 'creator']:
        return

    async with aiosqlite.connect('src/database.db') as db:
        cursor = await db.execute('SELECT minigame, give FROM chats WHERE chat_id = ?', (chat_id,))
        settings = await cursor.fetchone()
        minigame_enabled = True if settings is None or settings[0] is None else settings[0]
        give_enabled = True if settings is None or settings[1] is None else settings[1]

    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton(f"–ú—ñ–Ω—ñ-—ñ–≥—Ä–∏: {'‚úÖ' if minigame_enabled else '‚ùå'}", callback_data=f"toggle_minigame_{chat_id}"))
    keyboard.add(InlineKeyboardButton(f"–ü–µ—Ä–µ–¥–∞—á–∞ –∫–≥: {'‚úÖ' if give_enabled else '‚ùå'}", callback_data=f"toggle_give_{chat_id}"))

    await message.reply("‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —á–∞—Ç—É:", reply_markup=keyboard)

async def handle_settings_callback(callback_query: types.CallbackQuery):
    chat_id = int(callback_query.data.split('_')[2])
    setting = callback_query.data.split('_')[1]

    if setting not in ['minigame', 'give']:
        await callback_query.answer("‚ùå –ù–µ–≤—ñ–¥–æ–º–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞", show_alert=True)
        return

    user = await bot.get_chat_member(chat_id, callback_query.from_user.id)
    if not user.status in ['administrator', 'creator']:
        await callback_query.answer("‚ùå –¢—ñ–ª—å–∫–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∏ –º–æ–∂—É—Ç—å –∑–º—ñ–Ω—é–≤–∞—Ç–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è", show_alert=True)
        return

    async with aiosqlite.connect('src/database.db') as db:
        await db.execute(f'UPDATE chats SET {setting} = NOT COALESCE({setting}, 1) WHERE chat_id = ?', (chat_id,))
        await db.commit()

        cursor = await db.execute('SELECT minigame, give FROM chats WHERE chat_id = ?', (chat_id,))
        updated_settings = await cursor.fetchone()
        minigame_enabled = True if updated_settings[0] is None else updated_settings[0]
        give_enabled = True if updated_settings[1] is None else updated_settings[1]

    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton(f"–ú—ñ–Ω—ñ-—ñ–≥—Ä–∏: {'‚úÖ' if minigame_enabled else '‚ùå'}", callback_data=f"toggle_minigame_{chat_id}"))
    keyboard.add(InlineKeyboardButton(f"–ü–µ—Ä–µ–¥–∞—á–∞ –∫–≥: {'‚úÖ' if give_enabled else '‚ùå'}", callback_data=f"toggle_give_{chat_id}"))

    await bot.edit_message_text(chat_id=chat_id, message_id=callback_query.message.message_id, text="‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —á–∞—Ç—É:", reply_markup=keyboard)
    await callback_query.answer("‚ÑπÔ∏è –ó–º—ñ–Ω–µ–Ω–æ")

# /shop
async def shop(message: types.Message):
    keyboard = InlineKeyboardMarkup(row_width=1)
    main_shop_button = InlineKeyboardButton(text="‚ùî –Ø–∫ –∫—É–ø–∏—Ç–∏ –∫–≥?", callback_data="main_shop")
    main_shop_button2 = InlineKeyboardButton(text="üí≤ –Ø–∫–∞ —Ü—ñ–Ω–∞?", callback_data="shop_two")
    main_shop_button3 = InlineKeyboardButton(text="üõ∏ –ö—É–¥–∏ –ø—ñ–¥—É—Ç—å –≥—Ä–æ—à—ñ?", callback_data="shop_three")
    keyboard.add(main_shop_button)
    keyboard.add(main_shop_button2)
    keyboard.add(main_shop_button3)

    text = await message.reply("üí≥ –•–æ—á–µ—à –±—ñ–ª—å—à–µ —Ä—É—Å–æ—Ñ–æ–±—ñ—ó?\n–¢—É—Ç —Ç–∏ –∑–º–æ–∂–µ—à –¥—ñ–∑–Ω–∞—Ç–∏—Å—è —è–∫ —ó—ó –∫—É–ø–∏—Ç–∏", reply_markup=keyboard)
    await asyncio.sleep(DELETE)
    try:
        await bot.delete_message(chat_id=message.chat.id, message_id=text.message_id)
        await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
    except (MessageCantBeDeleted, MessageToDeleteNotFound):
        pass
    return

async def shop_selected(callback_query: types.CallbackQuery):
    shop_text = {
        "main_shop": "–ü–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –±–∞–Ω–∫—É: [send.monobank.ua](https://send.monobank.ua/jar/5T9BXGpL83)\n–†–æ–±–∏—Ç–µ –¥–æ–Ω–∞—Ç –Ω–∞ –ø–æ—Ç—Ä—ñ–±–Ω—É –≤–∞–º —Å—É–º—É, —ñ –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î—Ç–µ —Å–∫—Ä—ñ–Ω—à–æ—Ç –æ–ø–ª–∞—Ç–∏ –≤ @OnilyxeBot\n–ì–æ–ª–æ–≤–Ω–∞ —É–º–æ–≤–∞, –≤–∫–∞–∑–∞—Ç–∏ ID —á–∞—Ç—É –¥–µ –≤–∏ —Ö–æ—á–µ—Ç–µ –ø–æ–ø–æ–≤–Ω–µ–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É. –Ø–∫—â–æ —Ç–∏ –Ω–µ –∑–Ω–∞—î—à —â–æ —Ü–µ —Ç–∞–∫–µ, —Ç–æ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –Ω–∞–∑–≤—É —Å–≤–æ–≥–æ —á–∞—Ç—É\n–ü—ñ—Å–ª—è —á–µ–∫–∞–π –ø–æ–∫–∏ –∞–¥–º—ñ–Ω–∏ –æ–±—Ä–æ–±–ª—è—Ç—å —Ç–≤—ñ–π –∑–∞–ø–∏—Ç",
        "shop_two": "–ö—É—Ä—Å –≥—Ä–∏–≤–Ω—ñ –¥–æ —Ä—É—Å–æ—Ñ–æ–±—ñ—ó 1:10\n1 –≥—Ä–Ω = 10 –∫–≥\n100 –∫–≥ - 10 –≥—Ä–Ω\n1000 –∫–≥ - 100 –≥—Ä–Ω\n–ë–µ—Ä–µ–º–æ –ø–æ—Ç—Ä—ñ–±–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ä—É—Å–æ—Ñ–æ–±—ñ—ó —ñ –¥—ñ–ª–∏–º–æ –Ω–∞ 10\n500 –∫–≥ / 10 = 50 –≥—Ä–Ω",
        "shop_three": "–†–æ–∑—Ä–æ–±–Ω–∏–∫ –±–æ—Ç–∞ –∑–∞—Ä–∞–∑ —Å–ª—É–∂–∏—Ç—å –≤ –∞—Ä—Ç–∏–ª–µ—Ä—ñ—ó. –á–±–∞—à–∏—Ç—å –∫–∞—Ü–∞–ø—ñ–≤ —â–æ–¥–Ω—è (–ô–æ–≥–æ –∫–∞–Ω–∞–ª [5011](https://t.me/ua5011))\n–ó—ñ–±—Ä–∞–Ω—ñ –≥—Ä–æ—à—ñ –ø—ñ–¥—É—Ç—å –Ω–∞ –ø–æ–Ω–æ–≤–ª–µ–Ω–Ω—è –µ–∫—ñ–ø—ñ—Ä—É–≤–∞–Ω–Ω—è"
    }
    selected_shop = shop_text[callback_query.data]    
    keyboard = InlineKeyboardMarkup()
    back_button = InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="back_to_shop")
    keyboard.add(back_button)
    await bot.answer_callback_query(callback_query.id, "‚ÑπÔ∏è –ì–æ—Ç–æ–≤–æ")
    await callback_query.message.edit_text(f"{selected_shop}", reply_markup=keyboard, parse_mode="Markdown", disable_web_page_preview=True)

async def back_to_shop(callback_query: types.CallbackQuery):
    keyboard = InlineKeyboardMarkup(row_width=1)
    main_shop_button = InlineKeyboardButton(text="‚ùî –Ø–∫ –∫—É–ø–∏—Ç–∏ –∫–≥?", callback_data="main_shop")
    main_shop_button2 = InlineKeyboardButton(text="üí≤ –Ø–∫–∞ —Ü—ñ–Ω–∞?", callback_data="shop_two")
    main_shop_button3 = InlineKeyboardButton(text="üõ∏ –ö—É–¥–∏ –ø—ñ–¥—É—Ç—å –≥—Ä–æ—à—ñ?", callback_data="shop_three")
    keyboard.add(main_shop_button)
    keyboard.add(main_shop_button2)
    keyboard.add(main_shop_button3)
    await bot.answer_callback_query(callback_query.id, "‚ÑπÔ∏è –ì–∞—Ä–∞–∑–¥")
    await callback_query.message.edit_text("üí≥ –•–æ—á–µ—à –ø–æ–ø–æ–≤–Ω–∏—Ç–∏ —Å–≤–æ—é —Ä—É—Å–æ—Ñ–æ–±—ñ—é —ñ –æ–±—ñ–≥–Ω–∞—Ç–∏ —Å—É–ø–µ—Ä–Ω–∏–∫—ñ–≤?\n–¢—É—Ç —Ç–∏ –∑–º–æ–∂–µ—à –¥—ñ–∑–Ω–∞—Ç–∏—Å—è —è–∫ –∫—É–ø–∏—Ç–∏ –∫–≥", reply_markup=keyboard)

# /help
async def help(message: types.Message):
    keyboard = InlineKeyboardMarkup(row_width=4)
    main_game_button = InlineKeyboardButton(text="–û—Å–Ω–æ–≤–Ω–∞ –≥—Ä–∞ - /killru", callback_data="main_game")
    keyboard.add(main_game_button)
    games_buttons = [
        InlineKeyboardButton(text="üßå", callback_data="game_club"),
        InlineKeyboardButton(text="üé≤", callback_data="game_dice"),
        InlineKeyboardButton(text="üéØ", callback_data="game_darts"),
        InlineKeyboardButton(text="üèÄ", callback_data="game_basketball"),
        InlineKeyboardButton(text="‚öΩÔ∏è", callback_data="game_football"),
        InlineKeyboardButton(text="üé≥", callback_data="game_bowling"),
        InlineKeyboardButton(text="üé∞", callback_data="game_casino")
    ]
    keyboard.add(*games_buttons)
    text = await message.reply("‚öôÔ∏è –¢—É—Ç —Ç–∏ –∑–º–æ–∂–µ—à –¥—ñ–∑–Ω–∞—Ç–∏—Å—è\n–ø—Ä–æ –º–µ–Ω–µ –≤—Å–µ", reply_markup=keyboard)
    await asyncio.sleep(DELETE)
    try:
        await bot.delete_message(chat_id=message.chat.id, message_id=text.message_id)
        await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
    except (MessageCantBeDeleted, MessageToDeleteNotFound):
        pass
    return

async def game_selected(callback_query: types.CallbackQuery):
    game_emojis = {
        "main_game": 
        f"–ì—Ä–∞ –≤ —Ä—É—Å–æ—Ñ–æ–±—ñ—é"
        "\n–£ –≥—Ä—É –º–æ–∂–Ω–∞ –∑—ñ–≥—Ä–∞—Ç–∏ –∫–æ–∂–µ–Ω –¥–µ–Ω—å –æ–¥–∏–Ω —Ä–∞–∑, –≤–∏–∫–æ–Ω–∞–≤—à–∏ /killru"
        "\n–ü—Ä–∏ —Ü—å–æ–º—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ä—É—Å–æ—Ñ–æ–±—ñ—ó –≤–∏–ø–∞–¥–∫–æ–≤–∏–º —á–∏–Ω–æ–º –∑–±—ñ–ª—å—à–∏—Ç—å—Å—è(–¥–æ +25) –∞–±–æ –∑–º–µ–Ω—à–∏—Ç—å—Å—è(–¥–æ -5)"
        "\n–†–µ–π—Ç–∏–Ω –º–æ–∂–Ω–∞ –ø–æ–¥–∏–≤–∏—Ç–∏—Å—è –≤–∏–∫–æ–Ω–∞–≤—à–∏ /top. –Ñ –º–∞–ª–µ–Ω—å–∫–∏–π –≤–∞—Ä—ñ–∞–Ω—Ç /top10, —ñ –≥–ª–æ–±–∞–ª—å–Ω–∏–π —Ç–æ–ø, –ø–æ–∫–∞–∑—É—î —Ç–æ–ø —Å–µ—Ä–µ–¥ —É—Å—ñ—Ö —É—á–∞—Å–Ω–∏–∫—ñ–≤ /globaltop10 —ñ –º–∞–ª–µ–Ω—å–∫–∏–π –≤–∞—Ä—ñ–∞–Ω—Ç /globaltop10 "
        "\n–í–∏–∫–æ–Ω–∞–≤—à–∏ /my –º–æ–∂–Ω–∞ –¥—ñ–∑–Ω–∞—Ç–∏—Å—è —Å–≤–æ—é –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ä—É—Å–æ—Ñ–æ–±—ñ—ó"
        "\n–ü–µ—Ä–µ–¥–∞—Ç–∏ —Å–≤–æ—é —Ä—É—Å–æ—Ñ–æ–±—ñ—é —ñ–Ω—à–æ–º—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É, –º–æ–∂–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–≤—à–∏ –π–æ–º—É –∫–æ–º–∞–Ω–¥–æ—é /give, –≤–∫–∞–∑–∞–≤—à–∏ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ä—É—Å–æ—Ñ–æ–±—ñ—ó"
        "\n–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –±–æ—Ç–∞ –º–æ–∂–Ω–∞ –ø–æ–¥–∏–≤–∏—Ç–∏—Å—è, –≤–∏–∫–æ–Ω–∞–≤—à–∏ /about"
        "\n–°–ª—É–∂–±–æ–≤–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è: /ping"
        "\n–í–∞—Ä—ñ–∞–Ω—Ç–∏ –º—ñ–Ω—ñ-—ñ–≥–æ—Ä –º–æ–∂–Ω–∞ –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –∑–∞ –∫–æ–º–∞–Ω–¥–æ—é /help, –≤–∏–±—Ä–∞–≤—à–∏ –∑–Ω–∏–∑—É –µ–º–æ–¥–∑—ñ, —â–æ –≤–∫–∞–∑—É—î –Ω–∞ –≥—Ä—É"
        "\n–ó–∞ –∫–æ–º–∞–Ω–¥–æ—é /settings –º–æ–∂–Ω–∞ –≤–∏–º–∫–Ω—É—Ç–∏ –≤ —á–∞—Ç—ñ –º—ñ–Ω—ñ-—ñ–≥—Ä–∏ —Ç–∞ –ø–µ—Ä–µ–¥–∞—á—É —Ä—É—Å–æ—Ñ–æ–±—ñ—ó. –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –¥–æ—Å—Ç—É–ø–Ω—ñ —Ç—ñ–ª—å–∫–∏ –∞–¥–º—ñ–Ω–∞–º —á–∞—Ç—É"
        "\n–í–∏–π—Ç–∏ –∑ –≥—Ä–∏ (–ø—Ä–æ–≥—Ä–µ—Å –≤–∏–¥–∞–ª—è—î—Ç—å—Å—è): /leave"
        "\n\n\n–Ø–∫—â–æ –º–µ–Ω—ñ –≤–∏–¥–∞—Ç–∏ –ø—Ä–∞–≤–∞ –∞–¥–º—ñ–Ω–∞ (–≤–∏–¥–∞–ª–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å), —Ç–æ —è —á–µ—Ä–µ–∑ –≥–æ–¥–∏–Ω—É –±—É–¥—É –≤–∏–¥–∞–ª—è—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ –º–µ–Ω–µ —ñ —è–∫—ñ –º–µ–Ω–µ –≤–∏–∫–ª–∏–∫–∞–ª–∏. –ó–∞–ª–∏—à–∞—é—á–∏ —Ç—ñ–ª—å–∫–∏ –ø—Ä–æ –∑–º—ñ–Ω–∏ –≤ —Ä—É—Å–æ—Ñ–æ–±—ñ—ó"
        "\n\n\nKillru. –°–º–µ—Ä—Ç—å –≤—Å—å–æ–º—É —Ä–æ—Å—ñ–π—Å—å–∫–æ–º—É. ü´°",

        "game_club": 
        f"üßå –ó–Ω–∞–π–¥–∏ —ñ –≤–±–∏–π –º–æ—Å–∫–∞–ª—è. –°—É—Ç—å –≥—Ä–∏ –≤–≥–∞–¥–∞—Ç–∏ –¥–µ –∑–Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –º–æ—Å–∫–∞–ª—å –Ω–∞ —Å—ñ—Ç—Ü—ñ 3—Ö3"
        "\n‚è±Ô∏è –ú–æ–∂–Ω–∞ –∑—ñ–≥—Ä–∞—Ç–∏ —Ä–∞–∑ –Ω–∞ 2 –≥–æ–¥–∏–Ω–∏"
        "\nüîÄ –ü—Ä–∏–∑: —Å—Ç–∞–≤–∫–∞ –º–Ω–æ–∂–∏—Ç—å—Å—è –Ω–∞ 1.5. –ë—É–ª–æ 50 –∫–≥. –ü—Ä–∏ –≤–∏–≥—Ä–∞—à—ñ –∑—ñ —Å—Ç–∞–≤–∫–æ—é 10, –æ—Ç—Ä–∏–º—É—î—à 20. –ë—É–¥–µ 70"
        "\nüí∞ –°—Ç–∞–≤–∫–∏: 1, 5, 10, 20, 30, 40, 50, 100"
        "\nüöÄ –ö–æ–º–∞–Ω–¥–∞ –≥—Ä–∏: /game",

        "game_dice": 
        f"üé≤ –ì—Ä–∞ —É –∫–æ—Å—Ç—ñ. –°—É—Ç—å –≥—Ä–∏ –≤–≥–∞–¥–∞—Ç–∏ —è–∫–µ –≤–∏–ø–∞–¥–µ —á–∏—Å–ª–æ, –ø–∞—Ä–Ω–µ —á–∏ –Ω–µ–ø–∞—Ä–Ω–µ"
        "\n‚è±Ô∏è –ú–æ–∂–Ω–∞ –∑—ñ–≥—Ä–∞—Ç–∏ —Ä–∞–∑ –Ω–∞ 2 –≥–æ–¥–∏–Ω–∏"
        "\nüîÄ –ü—Ä–∏–∑: —Å—Ç–∞–≤–∫–∞ –º–Ω–æ–∂–∏—Ç—å—Å—è –Ω–∞ 1.5. –ë—É–ª–æ 50 –∫–≥. –ü—Ä–∏ –≤–∏–≥—Ä–∞—à—ñ –∑—ñ —Å—Ç–∞–≤–∫–æ—é 10, –æ—Ç—Ä–∏–º—É—î—à 15. –ë—É–¥–µ 65"
        "\nüí∞ –°—Ç–∞–≤–∫–∏: 1, 5, 10, 20, 30, 40, 50, 100"
        "\nüöÄ –ö–æ–º–∞–Ω–¥–∞ –≥—Ä–∏: /dice",

        "game_darts": 
        f"üéØ –ì—Ä–∞ –≤ –¥–∞—Ä—Ç—Å. –°—É—Ç—å –≥—Ä–∏ –ø–æ—Ç—Ä–∞–ø–∏—Ç–∏ –≤ —Ü–µ–Ω—Ç—Ä"
        "\n‚è±Ô∏è –ú–æ–∂–Ω–∞ –∑—ñ–≥—Ä–∞—Ç–∏ —Ä–∞–∑ –Ω–∞ 2 –≥–æ–¥–∏–Ω–∏"
        "\nüîÄ –ü—Ä–∏–∑: —Å—Ç–∞–≤–∫–∞ –º–Ω–æ–∂–∏—Ç—å—Å—è –Ω–∞ 2. –ë—É–ª–æ 50 –∫–≥. –ü—Ä–∏ –≤–∏–≥—Ä–∞—à—ñ –∑—ñ —Å—Ç–∞–≤–∫–æ—é 10, –æ—Ç—Ä–∏–º—É—î—à 20. –ë—É–¥–µ 70"
        "\nüí∞ –°—Ç–∞–≤–∫–∏: 1, 5, 10, 20, 30, 40, 50, 100"
        "\nüöÄ –ö–æ–º–∞–Ω–¥–∞ –≥—Ä–∏: /darts",

        "game_basketball": 
        f"üèÄ –ì—Ä–∞ –≤ –±–∞—Å–∫–µ—Ç–±–æ–ª. –°—É—Ç—å –≥—Ä–∏ –ø–æ—Ç—Ä–∞–ø–∏—Ç–∏ –≤ –∫–æ—à–∏–∫ –º'—è—á–µ–º"
        "\n‚è±Ô∏è –ú–æ–∂–Ω–∞ –∑—ñ–≥—Ä–∞—Ç–∏ —Ä–∞–∑ –Ω–∞ 2 –≥–æ–¥–∏–Ω–∏"
        "\nüîÄ –ü—Ä–∏–∑: —Å—Ç–∞–≤–∫–∞ –º–Ω–æ–∂–∏—Ç—å—Å—è –Ω–∞ 1.5. –ë—É–ª–æ 50 –∫–≥. –ü—Ä–∏ –≤–∏–≥—Ä–∞—à—ñ –∑—ñ —Å—Ç–∞–≤–∫–æ—é 10, –æ—Ç—Ä–∏–º—É—î—à 15. –ë—É–¥–µ 65"
        "\nüí∞ –°—Ç–∞–≤–∫–∏: 1, 5, 10, 20, 30, 40, 50, 100"
        "\nüöÄ –ö–æ–º–∞–Ω–¥–∞ –≥—Ä–∏: /basketball",

        "game_football": 
        f"‚öΩÔ∏è –ì—Ä–∞ —É —Ñ—É—Ç–±–æ–ª. –°—É—Ç—å –≥—Ä–∏ –ø–æ—Ç—Ä–∞–ø–∏—Ç–∏ –º'—è—á–µ–º —É –≤–æ—Ä–æ—Ç–∞"
        "\n‚è±Ô∏è –ú–æ–∂–Ω–∞ –∑—ñ–≥—Ä–∞—Ç–∏ —Ä–∞–∑ –Ω–∞ 2 –≥–æ–¥–∏–Ω–∏"
        "\nüîÄ –ü—Ä–∏–∑: —Å—Ç–∞–≤–∫–∞ –º–Ω–æ–∂–∏—Ç—å—Å—è –Ω–∞ 1.5. –ë—É–ª–æ 50 –∫–≥. –ü—Ä–∏ –≤–∏–≥—Ä–∞—à—ñ –∑—ñ —Å—Ç–∞–≤–∫–æ—é 10, –æ—Ç—Ä–∏–º—É—î—à 15. –ë—É–¥–µ 65"
        "\nüí∞ –°—Ç–∞–≤–∫–∏: 1, 5, 10, 20, 30, 40, 50, 100"
        "\nüöÄ –ö–æ–º–∞–Ω–¥–∞ –≥—Ä–∏: /football",

        "game_bowling": 
        f"üé≥ –ì—Ä–∞ –≤ –±–æ—É–ª—ñ–Ω–≥. –°—É—Ç—å –≥—Ä–∏ –≤–∏–±–∏—Ç–∏ —Å—Ç—Ä–∞–π–∫"
        "\n‚è±Ô∏è –ú–æ–∂–Ω–∞ –∑—ñ–≥—Ä–∞—Ç–∏ —Ä–∞–∑ –Ω–∞ 2 –≥–æ–¥–∏–Ω–∏"
        "\nüîÄ –ü—Ä–∏–∑: —Å—Ç–∞–≤–∫–∞ –º–Ω–æ–∂–∏—Ç—å—Å—è –Ω–∞ 2. –ë—É–ª–æ 50 –∫–≥. –ü—Ä–∏ –≤–∏–≥—Ä–∞—à—ñ –∑—ñ —Å—Ç–∞–≤–∫–æ—é 10, –æ—Ç—Ä–∏–º—É—î—à 20. –ë—É–¥–µ 70"
        "\nüí∞ –°—Ç–∞–≤–∫–∏: 1, 5, 10, 20, 30, 40, 50, 100"
        "\nüöÄ –ö–æ–º–∞–Ω–¥–∞ –≥—Ä–∏: /bowling",
        
        "game_casino": 
        f"üé∞ –ì—Ä–∞ –≤ –∫–∞–∑–∏–Ω–æ. –°—É—Ç—å –≥—Ä–∏ –≤–∏–±–∏—Ç–∏ –¥–∂–µ–∫–ø–æ—Ç"
        "\n‚è±Ô∏è –ú–æ–∂–Ω–∞ –∑—ñ–≥—Ä–∞—Ç–∏ —Ä–∞–∑ –Ω–∞ 2 –≥–æ–¥–∏–Ω–∏"
        "\nüîÄ –ü—Ä–∏–∑: —Å—Ç–∞–≤–∫–∞ –º–Ω–æ–∂–∏—Ç—å—Å—è –Ω–∞ 2. –ë—É–ª–æ 50 –∫–≥. –ü—Ä–∏ –≤–∏–≥—Ä–∞—à—ñ –∑—ñ —Å—Ç–∞–≤–∫–æ—é 10, –æ—Ç—Ä–∏–º—É—î—à 20. –ë—É–¥–µ 70. –Ø–∫—â–æ –≤–∏–±–∏—Ç–∏ –¥–∂–µ–∫–ø–æ—Ç (777), —Ç–æ —Å—Ç–∞–≤–∫–∞ –º–Ω–æ–∂–∏—Ç—å—Å—è –Ω–∞ 10"
        "\nüí∞ –°—Ç–∞–≤–∫–∏: 1, 5, 10, 20, 30, 40, 50, 100"
        "\nüöÄ –ö–æ–º–∞–Ω–¥–∞ –≥—Ä–∏: /casino",
   }
    selected_game = game_emojis[callback_query.data]    
    keyboard = InlineKeyboardMarkup()
    back_button = InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="back_to_games")
    keyboard.add(back_button)
    await bot.answer_callback_query(callback_query.id, "‚ÑπÔ∏è –ì–æ—Ç–æ–≤–æ")
    await callback_query.message.edit_text(f"{selected_game}", reply_markup=keyboard, parse_mode="Markdown")

async def back_to_games(callback_query: types.CallbackQuery):
    keyboard = InlineKeyboardMarkup(row_width=4)
    main_game_button = InlineKeyboardButton(text="–û—Å–Ω–æ–≤–Ω–∞ –≥—Ä–∞ - /killru", callback_data="main_game")
    keyboard.add(main_game_button)
    games_buttons = [
        InlineKeyboardButton(text="üßå", callback_data="game_club"),
        InlineKeyboardButton(text="üé≤", callback_data="game_dice"),
        InlineKeyboardButton(text="üéØ", callback_data="game_darts"),
        InlineKeyboardButton(text="üèÄ", callback_data="game_basketball"),
        InlineKeyboardButton(text="‚öΩÔ∏è", callback_data="game_football"),
        InlineKeyboardButton(text="üé≥", callback_data="game_bowling"),
        InlineKeyboardButton(text="üé∞", callback_data="game_casino")
    ]
    keyboard.add(*games_buttons)
    await bot.answer_callback_query(callback_query.id, "‚ÑπÔ∏è –ì–∞—Ä–∞–∑–¥")
    await callback_query.message.edit_text("‚öôÔ∏è –¢—É—Ç —Ç–∏ –∑–º–æ–∂–µ—à –¥—ñ–∑–Ω–∞—Ç–∏—Å—è\n–ø—Ä–æ –º–µ–Ω–µ –≤—Å–µ", reply_markup=keyboard)

# /leave
async def leave(message: types.Message):
    if await check_type(message):
        return

    inline = InlineKeyboardMarkup(row_width=2)
    inline.add(InlineKeyboardButton("‚úÖ –¢–∞–∫", callback_data="confirm_leave"), InlineKeyboardButton("‚ùå –ù—ñ", callback_data="cancel_leave"))
    
    user_id = message.from_user.id
    chat_id = message.chat.id
    mention = f"[{message.from_user.username}](https://t.me/{message.from_user.username})" if message.from_user.username else message.from_user.first_name

    async with aiosqlite.connect('src/database.db') as db:
        async with db.execute('SELECT * FROM user_values WHERE user_id = ? AND chat_id = ?', (user_id, chat_id)) as cursor:
            user_exists = await cursor.fetchone()

    if not user_exists:
        await reply_and_delete(message, f"üòØ {mention}, —É —Ç–µ–±–µ —ñ —Ç–∞–∫ –Ω–µ–º–∞—î —Ä—É—Å–æ—Ñ–æ–±—ñ—ó, –≥—É–±–∏—Å—è")

    else:
        msg = await bot.send_message(chat_id, f"üò° {mention}, —Ç–∏ –≤–ø–µ–≤–Ω–µ–Ω–∏–π, —â–æ —Ö–æ—á–µ—à –ø—Ä–æ—ó–±–∞—Ç–∏ —Å–≤–æ—é —Ä—É—Å–æ—Ñ–æ–±—ñ—é? –¢–≤–æ—ó –¥–∞–Ω—ñ –±—É–¥–µ –≤–∏–¥–∞–ª–µ–Ω–æ –∑ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö. –¶—é –¥—ñ—é –Ω–µ –º–æ–∂–Ω–∞ –±—É–¥–µ —Å–∫–∞—Å—É–≤–∞—Ç–∏", reply_markup=inline, parse_mode="Markdown", disable_web_page_preview=True)
        await cache.set(f"leavers_{msg.message_id}", user_id)
        await asyncio.sleep(DELETE)
        try:
            await bot.delete_message(chat_id=chat_id, message_id=message.message_id)
        except (MessageCantBeDeleted, MessageToDeleteNotFound):
            pass

async def leave_inline(callback_query: CallbackQuery):
    user_id = callback_query.from_user.id
    chat_id = callback_query.message.chat.id
    
    leaver_id = await cache.get(f"leavers_{callback_query.message.message_id}")

    if leaver_id != user_id:
        await bot.answer_callback_query(callback_query.id, "‚ùå –¶—ñ –∫–Ω–æ–ø–æ—á–∫–∏ –Ω–µ –¥–ª—è —Ç–µ–±–µ!", show_alert=True)
        return

    mention = f"[{callback_query.from_user.username}](https://t.me/{callback_query.from_user.username})" if callback_query.from_user.username else callback_query.from_user.first_name

    if callback_query.data == 'confirm_leave':
        async with aiosqlite.connect('src/database.db') as db:
            await db.execute('DELETE FROM user_values WHERE user_id = ? AND chat_id = ?', (user_id, chat_id))
            if TEST == 'True':
                await db.execute('UPDATE cooldowns SET killru = NULL, give = NULL, game = NULL, dice = NULL, darts = NULL, basketball = NULL, football = NULL, bowling = NULL, casino = NULL WHERE user_id = ? AND chat_id = ?', (user_id, chat_id))
            await db.commit()

        await bot.answer_callback_query(callback_query.id, "üëπ –û—Ö –±—Ä–∞—Ç–∏–∫—É, –¥–∞—Ä–µ–º–Ω–æ —Ç–∏ —Ü–µ –∑—Ä–æ–±–∏–≤...")
        await bot.edit_message_text(f"ü§¨ {mention}, —Ç–∏ –ø–æ–∫–∏–Ω—É–≤ –≥—Ä—É, —ñ —Ç–µ–±–µ –±—É–ª–æ –≤–∏–¥–∞–ª–µ–Ω–æ –∑ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö", chat_id, callback_query.message.message_id, parse_mode="Markdown", disable_web_page_preview=True)
    else:
        await bot.answer_callback_query(callback_query.id, "‚ÑπÔ∏è C–∫–∞—Å–æ–≤—É—î–º–æ..")
        await bot.edit_message_text(f"ü´° {mention} –∫—Ä–∞—Å—É–Ω—á–∏–∫, —Ç–∏ –∑–∞–ª–∏—à–∏–≤—Å—è —É –≥—Ä—ñ", chat_id, callback_query.message.message_id, parse_mode="Markdown", disable_web_page_preview=True)
        await asyncio.sleep(DELETE)
        try:
            await bot.delete_message(chat_id=chat_id, message_id=callback_query.message.message_id)
        except (MessageCantBeDeleted, MessageToDeleteNotFound):
            pass  

# /give
async def give(message: types.Message):
    chat_id = message.chat.id

    if not await check_settings(chat_id, 'give'):
        return

    if await check_type(message):
        return

    if not message.reply_to_message:
        await reply_and_delete(message, "‚ÑπÔ∏è –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π `/give N` —É –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è")
        return

    receiver_id = message.reply_to_message.from_user.id
    receiver_is_bot = message.reply_to_message.from_user.is_bot

    if receiver_is_bot:
        await reply_and_delete(message, "‚ÑπÔ∏è –ë–æ—Ç–∏ –Ω–µ –º–æ–∂—É—Ç—å –≥—Ä–∞—Ç–∏")
        return

    global givers
    if message.reply_to_message and message.from_user.id != message.reply_to_message.from_user.id:
        parts = message.text.split()
        if len(parts) != 2:
            await reply_and_delete(message, "‚ÑπÔ∏è –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π `/give N` —É –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è")
            return

        try:
            value = int(parts[1])
            if value <= 0:
                raise ValueError

        except ValueError:
            await reply_and_delete(message, "ü§® –¢–∏–ø—É —Ä–æ–∑—É–º–Ω–∏–π, —Ç–∞–∫? –í–≤–µ–¥–∏ –ø–ª—é—Å–æ–≤–µ —ñ —Ü—ñ–ª–µ —á–∏—Å–ª–æ. –ù–∞–ø—Ä–∏–∫–ª–∞–¥: `/give 5` —É –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è")
            return

        giver_id = message.from_user.id
        chat_id = message.chat.id
        now = datetime.now()

        async with aiosqlite.connect('src/database.db') as db:
            async with db.cursor() as cursor:   
                await cursor.execute('SELECT give FROM cooldowns WHERE user_id = ? AND chat_id = ? AND give IS NOT NULL', (giver_id, chat_id))
                last_given = await cursor.fetchone()

        if last_given and last_given[0]:
            last_given = datetime.strptime(last_given[0], '%Y-%m-%d %H:%M:%S') 
            if last_given + timedelta(hours=5) > now:
                cooldown_time = (last_given + timedelta(hours=5)) - now
                cooldown_time = str(cooldown_time).split('.')[0]
                await reply_and_delete(message,f"‚ÑπÔ∏è –¢–∏ —â–µ –Ω–µ –º–æ–∂–µ—à –ø–µ—Ä–µ–¥–∞—Ç–∏ —Ä—É—Å–æ—Ñ–æ–±—ñ—é. –°–ø—Ä–æ–±—É–π —á–µ—Ä–µ–∑ `{cooldown_time}`")
                return
        else:
            last_given = None

        async with aiosqlite.connect('src/database.db') as db:
            async with db.cursor() as cursor: 
                await cursor.execute('SELECT value FROM user_values WHERE user_id = ? AND chat_id = ?', (giver_id, chat_id))
                result = await cursor.fetchone()
                if not result or result[0] < value:
                    await reply_and_delete(message, f"‚ÑπÔ∏è –£ —Ç–µ–±–µ `{result[0] if result else 0}` –∫–≥. –¶—å–æ–≥–æ –Ω–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ")
                    return


        inline = InlineKeyboardMarkup(row_width=2)
        inline_yes = InlineKeyboardButton('‚úÖ –¢–∞–∫', callback_data=f'give_{value}_yes_{message.reply_to_message.from_user.id}')
        inline_no = InlineKeyboardButton('‚ùå –ù—ñ', callback_data=f'give_{value}_no_{message.reply_to_message.from_user.id}')
        inline.add(inline_yes, inline_no)

        current_rusophobia = result[0] if result else 0
        mention = ('[' + message.reply_to_message.from_user.username + ']' + '(https://t.me/' + message.reply_to_message.from_user.username + ')') if message.reply_to_message.from_user.username else message.reply_to_message.from_user.first_name
        giver_mention = ('[' + message.from_user.username + ']' + '(https://t.me/' + message.from_user.username + ')') if message.from_user.username else message.from_user.first_name
        sent_message = await bot.send_message(chat_id=message.chat.id, text=f"üîÑ {giver_mention} –∑–±–∏—Ä–∞—î—Ç—å—Å—è –ø–µ—Ä–µ–¥–∞—Ç–∏ `{value}` –∫–≥ —Ä—É—Å–æ—Ñ–æ–±—ñ—ó {mention}\nüè∑Ô∏è –í —Ç–µ–±–µ: `{current_rusophobia}` –∫–≥. –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂—É—î—à?", reply_markup=inline, parse_mode="Markdown", disable_web_page_preview=True)

        await cache.set(f"givers_{sent_message.message_id}", message.from_user.id)

        await asyncio.sleep(DELETE)
        try:
            await bot.delete_message(message.chat.id, message.message_id)
        except (MessageCantBeDeleted, MessageToDeleteNotFound):
                pass
    else:
        await reply_and_delete(message, "‚ÑπÔ∏è –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π `/give N` —É –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è")

async def give_inline(callback_query: types.CallbackQuery):
    _, value, answer, receiver_id = callback_query.data.split('_')
    value = int(value)
    receiver_id = int(receiver_id)
    giver_id = await cache.get(f"givers_{callback_query.message.message_id}")

    receiver = await bot.get_chat_member(callback_query.message.chat.id, receiver_id)
    mention = ('[' + receiver.user.username + ']' + '(https://t.me/' + receiver.user.username + ')') if receiver.user.username else receiver.user.first_name

    now = datetime.now()
    
    async with aiosqlite.connect('src/database.db') as db:
        async with db.execute('SELECT give FROM cooldowns WHERE user_id = ? AND chat_id = ? AND give IS NOT NULL', (giver_id, callback_query.message.chat.id)) as cursor:
            last_given_row = await cursor.fetchone()

        if last_given_row and last_given_row[0]:
            last_given = datetime.strptime(last_given_row[0], '%Y-%m-%d %H:%M:%S')
            if last_given + timedelta(hours=5) > now:
                cooldown_time = (last_given + timedelta(hours=5)) - now
                cooldown_time = str(cooldown_time).split('.')[0]
                await edit_and_delete(bot, callback_query.message.chat.id, callback_query.message.message_id, f"‚ö†Ô∏è –¢–∏ —â–µ –Ω–µ –º–æ–∂–µ—à –ø–µ—Ä–µ–¥–∞—Ç–∏ —Ä—É—Å–æ—Ñ–æ–±—ñ—é. –°–ø—Ä–æ–±—É–π —á–µ—Ä–µ–∑ `{cooldown_time}`")
                return

        if giver_id != callback_query.from_user.id:
            await bot.answer_callback_query(callback_query.id, text="‚ùå –¶—ñ –∫–Ω–æ–ø–æ—á–∫–∏ –Ω–µ –¥–ª—è —Ç–µ–±–µ!", show_alert=True)
            return

        if answer == 'yes':
            await db.execute('UPDATE user_values SET value = value - ? WHERE user_id = ? AND chat_id = ?', (value, giver_id, callback_query.message.chat.id))
            await db.execute(
                'INSERT INTO user_values (user_id, chat_id, value) VALUES (?, ?, ?) '
                'ON CONFLICT(user_id, chat_id) DO UPDATE SET value = value + ?', (receiver_id, callback_query.message.chat.id, value, value))
            if TEST == 'False':
                await db.execute(
                    'UPDATE cooldowns SET give = ? WHERE user_id = ? AND chat_id = ?', (now.strftime("%Y-%m-%d %H:%M:%S"), giver_id, callback_query.message.chat.id))
            await db.commit()

            async with db.execute('SELECT value FROM user_values WHERE user_id = ? AND chat_id = ?', (giver_id, callback_query.message.chat.id)) as cursor:
                updated_value = await cursor.fetchone()

            if callback_query.from_user.username:
                giver_mention = f"[{callback_query.from_user.username}](https://t.me/{callback_query.from_user.username})"
            else:
                giver_mention = callback_query.from_user.first_name

            await bot.answer_callback_query(callback_query.id, "‚ÑπÔ∏è –ü–µ—Ä–µ–∫–∞–∑—É—é –∫–≥..")
            await bot.edit_message_text(
                text=f"‚úÖ {giver_mention} –ø–µ—Ä–µ–¥–∞–≤ `{value}` –∫–≥ —Ä—É—Å–æ—Ñ–æ–±—ñ—ó {mention}\nüè∑Ô∏è –¢–µ–ø–µ—Ä –≤ —Ç–µ–±–µ: `{updated_value[0] if updated_value else 0}` –∫–≥",
                chat_id=callback_query.message.chat.id,
                message_id=callback_query.message.message_id,
                parse_mode="Markdown",
                disable_web_page_preview=True
            )
        else:
            await bot.answer_callback_query(callback_query.id, "‚ÑπÔ∏è –°–∫–∞—Å–æ–≤—É—é..")
            await edit_and_delete(bot, callback_query.message.chat.id, callback_query.message.message_id, "‚ÑπÔ∏è –ü–µ—Ä–µ–¥–∞—á–∞ —Ä—É—Å–æ—Ñ–æ–±—ñ—ó —Å–∫–∞—Å–æ–≤–∞–Ω–∞")
            return

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –æ–±—Ä–æ–±–Ω–∏–∫–∞
def messages_handlers(dp, bot):
    dp.register_message_handler(start, commands=['start'])
    dp.register_message_handler(ping, commands=['ping'])
    dp.register_message_handler(about, commands=['about'])
    dp.register_message_handler(globaltop, commands=['globaltop'])
    dp.register_message_handler(globaltop10, commands=['globaltop10'])
    dp.register_message_handler(top10, commands=['top10'])
    dp.register_message_handler(top, commands=['top'])
    dp.register_message_handler(settings, commands=['settings'])
    dp.register_callback_query_handler(handle_settings_callback, lambda c: c.data.startswith('toggle_'))
    dp.register_message_handler(shop, commands=['shop'])
    dp.register_callback_query_handler(shop_selected, lambda c: c.data == 'main_shop' or c.data.startswith('shop_'))
    dp.register_callback_query_handler(back_to_shop, lambda c: c.data == 'back_to_shop')
    dp.register_message_handler(my, commands=['my'])
    dp.register_message_handler(help, commands=['help'])
    dp.register_callback_query_handler(game_selected, lambda c: c.data == 'main_game' or c.data.startswith('game_'))
    dp.register_callback_query_handler(back_to_games, lambda c: c.data == 'back_to_games')
    dp.register_message_handler(leave, commands=['leave'])
    dp.register_callback_query_handler(leave_inline, lambda c: c.data in ['confirm_leave', 'cancel_leave'])
    dp.register_message_handler(give, commands=['give'])
    dp.register_callback_query_handler(give_inline, lambda c: c.data and c.data.startswith('give_'))
