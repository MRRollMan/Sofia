# –Ü–º–ø–æ—Ä—Ç–∏
import configparser
import aiosqlite
import aiogram
import logging
import psutil

from src.functions import reply_and_delete, show_globaltop, show_top
from datetime import datetime, timedelta
from aiogram import Bot, types


# –Ü–º–ø–æ—Ä—Ç—É—î–º–æ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ–π–Ω–∏–π —Ñ–∞–π–ª
config = configparser.ConfigParser()
try:
    config.read('config.ini')
    TOKEN = config['TOKEN']['BOT']
    ADMIN = int(config['ID']['ADMIN'])
    DELETE = int(config['SETTINGS']['DELETE'])
    VERSION = (config['SETTINGS']['VERSION'])
except (FileNotFoundError, KeyError) as e:
    logging.error(f"–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ–π–Ω–æ–≥–æ —Ñ–∞–π–ª—É –≤ messages.py: {e}")
    exit()


# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞
bot = Bot(token=TOKEN)


#/-----start
async def start(message: types.Message):
    await reply_and_delete(message, "ü´° –ü—Ä–∏–≤—ñ—Ç. –Ø –±–æ—Ç –¥–ª—è –≥—Ä–∏ –≤ —Ä—É—Å–æ—Ñ–æ–±—ñ—é. –î–æ–¥–∞–≤–∞–π –º–µ–Ω–µ –≤ —á–∞—Ç —ñ —Ä–æ–∑–≤–∞–∂–∞–π—Å—è. –©–æ–± –¥—ñ–∑–Ω–∞—Ç–∏—Å—è —è–∫ –º–Ω–æ—é –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ç–∏—Å—è, –≤–∏–≤—á–∞–π /help")


#-----/help
async def help(message: types.Message):
    help_text = (
        "üéÆ *–†–æ–∑–≤–∏–≤–∞–π —Å–≤–æ—é —Ä—É—Å–æ—Ñ–æ–±—ñ—é. –ó—Ä–æ—Å—Ç–∞–π —ó—ó —â–æ–¥–Ω—è, —ñ –∑–º–∞–≥–∞–π—Å—è –∑ –¥—Ä—É–∑—è–º–∏*" +
        "\n\n*üìà /killru* ‚Äî _–°–ø—Ä–æ–±—É–≤–∞—Ç–∏ –ø—ñ–¥–≤–∏—â–∏—Ç–∏ —Å–≤–æ—é —Ä—É—Å–æ—Ñ–æ–±—ñ—é_" +
        "\n*üò° /my* ‚Äî _–ú–æ—è —Ä—É—Å–æ—Ñ–æ–±—ñ—è_" +
        "\n*üéÆ /game* ‚Äî _–ó–Ω–∞–π–¥–∏ —ñ –≤–±–∏–π –º–æ—Å–∫–∞–ª—è_" +
        "\n*üé≤ /dice* ‚Äî _–ú—ñ–Ω—ñ –≥—Ä–∞, –∫–∏–Ω—å –∫—ñ—Å—Ç–∫–∏_" +
        "\n*üîÑ /give* ‚Äî _–ü–µ—Ä–µ–¥–∞—Ç–∏ —Ä—É—Å–æ—Ñ–æ–±—ñ—é_" +
        "\n*üåè /globaltop* ‚Äî _–¢–æ–ø –≤—Å—ñ—Ö –≥—Ä–∞–≤—Ü—ñ–≤_" +
        "\n*üìä /top10* ‚Äî _–¢–æ–ø 10 –≥—Ä–∞–≤—Ü—ñ–≤ —á–∞—Ç—É_" +
        "\n*üìä /top* ‚Äî _–¢–æ–ø –≥—Ä–∞–≤—Ü—ñ–≤ —á–∞—Ç—É_" +
        "\n*ü´° /leave* ‚Äî _–ü–æ–∫–∏–Ω—É—Ç–∏ –≥—Ä—É (–ø—Ä–æ–≥—Ä–µ—Å –≤–∏–¥–∞–ª—è—î—Ç—å—Å—è):_" +
        "\n*üì° /about* ‚Äî _–ü—Ä–æ –±–æ—Ç–∞_" +
        "\n\n_–Ø–∫—â–æ –º–µ–Ω—ñ –≤–∏–¥–∞—Ç–∏ –ø—Ä–∞–≤–∞ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –Ω–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å, —è –±—É–¥—É –ø—Ä–∏–±–∏—Ä–∞—Ç–∏ –∑–∞ —Å–æ–±–æ—é_")
    
    await reply_and_delete(message, help_text)


#-----/ping
async def ping(message: types.Message):
    start_time = datetime.now()
    await bot.get_me()
    end_time = datetime.now()
    ping_time = (end_time - start_time).total_seconds() * 1000
    cpu_usage = psutil.cpu_percent(interval=1)
    ram_usage = psutil.virtual_memory().percent

    async with aiosqlite.connect('src/database.db') as db:
        async with db.execute('SELECT count FROM queries WHERE datetime >= ? AND datetime < ? ORDER BY datetime DESC LIMIT 1', (start_time.replace(hour=0, minute=0, second=0, microsecond=0), start_time.replace(hour=23, minute=59, second=59, microsecond=999999))) as cursor:
            today_record = await cursor.fetchone()
            today_queries = today_record[0] if today_record else 0

        async with db.execute('SELECT SUM(count) FROM queries WHERE datetime >= ?', (start_time - timedelta(days=7),)) as cursor:
            last_week_record = await cursor.fetchone()
            last_week_queries = last_week_record[0] if last_week_record else 0

        async with db.execute('SELECT SUM(count) FROM queries') as cursor:
            all_time_record = await cursor.fetchone()
            all_time_queries = all_time_record[0] if all_time_record else 0

    ping_text = (
        f"üì° Ping: `{ping_time:.2f}` ms\n\n"
        f"üî• CPU: `{cpu_usage}%`\n"
        f"üíæ RAM: `{ram_usage}%`\n\n"
        f"üìä –ö—ñ–ª—å–∫—ñ—Å—Ç—å –∑–∞–ø–∏—Ç—ñ–≤:\n"
        f"_–ó–∞ —Å—å–æ–≥–æ–¥–Ω—ñ:_ `{today_queries}`\n"
        f"_–ó–∞ —Ç–∏–∂–¥–µ–Ω—å:_ `{last_week_queries}`\n"
        f"_–ó–∞ –≤–µ—Å—å —á–∞—Å:_ `{all_time_queries}`")

    await reply_and_delete(message, ping_text)


#-----/about
async def about(message: types.Message):
    about_text = (
        f"üì° Sofia `{VERSION}`\n\n"
        f"[News Channel](t.me/SofiaBotRol)\n"
        f"[Source](https://github.com/onilyxe/Sofia)\n\n"
        f"Made [onilyxe](https://t.me/itsokt0cry). Idea [den](https://t.me/itsokt0cry)")

    await reply_and_delete(message, about_text)


# –í–∏–≤–µ–¥–µ–Ω–Ω—è –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —Ç–æ–ø–∞
async def globaltop(message: types.Message):
    await show_globaltop(message, limit=101, title='üåè –ì–ª–æ–±–∞–ª—å–Ω–∏–π —Ç–æ–ø —Ä—É—Å–æ—Ñ–æ–±—ñ–π')


# –í–∏–≤–µ–¥–µ–Ω–Ω—è —Ç–æ–ø 10
async def top10(message: types.Message):
    await show_top(message, limit=10, title='üìä –¢–æ–ø 10 —Ä—É—Å–æ—Ñ–æ–±—ñ–π')


# –í–∏–≤–µ–¥–µ–Ω–Ω—è —Ç–æ–ø–∞
async def top(message: types.Message):
    await show_top(message, limit=101, title='üìä –¢–æ–ø —Ä—É—Å–æ—Ñ–æ–±—ñ–π')


# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –æ–±—Ä–æ–±–Ω–∏–∫–∞
def messages_handlers(dp, bot):
    dp.register_message_handler(start, commands=['start'])
    dp.register_message_handler(help, commands=['help'])
    dp.register_message_handler(ping, commands=['ping'])
    dp.register_message_handler(about, commands=['about'])
    dp.register_message_handler(globaltop, commands=['globaltop'])
    dp.register_message_handler(top10, commands=['top10'])
    dp.register_message_handler(top, commands=['top'])