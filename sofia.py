import json
import random
import aiogram
import sqlite3
from datetime import datetime, timedelta
from aiogram import Bot, Dispatcher, types
from aiogram.types import ParseMode
from aiogram.utils import executor
from aiogram.utils.exceptions import BadRequest
import asyncio

with open('config.json', 'r') as file:
    config = json.load(file)

TOKEN = config['TOKEN']
ADMIN_ID = config['ADMIN_ID']
bot = Bot(token=TOKEN)
dp = Dispatcher(bot)

conn = sqlite3.connect('sofia.db', check_same_thread=False)
cursor = conn.cursor()
cursor.execute('''CREATE TABLE IF NOT EXISTS user_values 
                 (user_id INTEGER, 
                  chat_id INTEGER, 
                  value INTEGER, 
                  PRIMARY KEY(user_id, chat_id))''')

cursor.execute('''CREATE TABLE IF NOT EXISTS user_cooldowns (
                  user_id INTEGER,
                  chat_id INTEGER,
                  command TEXT,
                  last_used TIMESTAMP,
                  PRIMARY KEY(user_id, chat_id, command))''')


cursor.execute('CREATE TABLE IF NOT EXISTS chats (chat_id INTEGER PRIMARY KEY)')

cooldowns = {}

def add_chat(chat_id):
    cursor.execute('INSERT OR IGNORE INTO chats (chat_id) VALUES (?)', (chat_id,))
    conn.commit()

#/message-----
@dp.message_handler(commands=['message'])
async def broadcast_message(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        return

    text_to_send = message.text.split(" ", 1)[1]
    cursor.execute('SELECT chat_id FROM chats')
    chat_ids = cursor.fetchall()

    successful_sends = 0
    for chat_id in chat_ids:
        try:
            await bot.send_message(chat_id[0], text_to_send)
            successful_sends += 1
        except Exception as e:
            print(f"–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å —Ä–æ–∑—Å–∏–ª–∫–∏ –≤ —á–∞—Ç {chat_id[0]}: {e}")

    await message.reply(f"–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –≤ {successful_sends} —á–∞—Ç—ñ–≤.")
    
#/killru-----
@dp.message_handler(commands=['killru'])
async def get_benis(message: types.Message):
    add_chat(message.chat.id)
    user_id = message.from_user.id
    chat_id = message.chat.id
    now = datetime.now()

    cursor.execute('SELECT last_used FROM user_cooldowns WHERE user_id = ? AND chat_id = ?', (user_id, chat_id))
    result = cursor.fetchone()

    if result:
        last_used = datetime.strptime(result[0], '%Y-%m-%d %H:%M:%S.%f')
        if last_used + timedelta(hours=24) > now:
            cooldown_time = (last_used + timedelta(hours=24)) - now
            cooldown_time = str(cooldown_time).split('.')[0]
            await message.reply(f"‚ÑπÔ∏è–¢–∏ —â–µ –Ω–µ –º–æ–∂–µ—à –≥—Ä–∞—Ç–∏. –°–ø—Ä–æ–±—É–π —á–µ—Ä–µ–∑ {cooldown_time}")
            return
    else:
        cursor.execute('INSERT INTO user_cooldowns (user_id, chat_id, last_used) VALUES (?, ?, ?)', (user_id, chat_id, str(now)))
        conn.commit()

    benis = random.randint(-4, 15)
    cursor.execute('SELECT value FROM user_values WHERE user_id = ? AND chat_id = ?', (user_id, chat_id))
    result = cursor.fetchone()

    if result is None:
        cursor.execute('INSERT INTO user_values (user_id, chat_id, value) VALUES (?, ?, ?)', (user_id, chat_id, benis))
        conn.commit()
    else:
        new_benis = result[0] + benis
        cursor.execute('UPDATE user_values SET value = ? WHERE user_id = ? AND chat_id = ?', (new_benis, user_id, chat_id))
        conn.commit()

    cursor.execute('UPDATE user_cooldowns SET last_used = ? WHERE user_id = ? AND chat_id = ?', (str(now), user_id, chat_id))
    conn.commit()

    if benis >= 0:
        message_text = f"üìà–¢–≤–æ—è —Ä—É—Å–æ—Ñ–æ–±—ñ—è –∑–±—ñ–ª—å—à–∏–ª–∞—Å—å –Ω–∞ {benis} –∫–≥"
    else:
        message_text = f"üìâ–¢–≤–æ—è —Ä—É—Å–æ—Ñ–æ–±—ñ—è –∑–º–µ–Ω—à–∏–ª–∞—Å—å –Ω–∞ {abs(benis)} –∫–≥"
    await message.reply(message_text)

#/my-----
@dp.message_handler(commands=['my'])
async def show_my_benis(message: types.Message):
    user_id = message.from_user.id
    chat_id = message.chat.id
    cursor.execute('SELECT value FROM user_values WHERE user_id = ? AND chat_id = ?', (user_id, chat_id))
    result = cursor.fetchone()

    if result is None:
        await message.reply('üòØ–¢–∏ —â–µ –Ω–µ –≥—Ä–∞–≤')
    else:
        benis = result[0]
        await message.reply(f"üò°–¢–≤–æ—è —Ä—É—Å–æ—Ñ–æ–±—ñ—è: {benis} –∫–≥")

async def get_user_info(chat_id, user_id):
    try:
        user = await bot.get_chat_member(chat_id, user_id)
        return user.user.username
    except Exception as e:
        print(f"–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: {e}")
        return None

#/give-----
@dp.message_handler(commands=['give'])
async def give_benis(message: types.Message):
    if message.reply_to_message and message.from_user.id != message.reply_to_message.from_user.id:
        parts = message.text.split()
        if len(parts) != 2:
            await message.reply("‚öôÔ∏è –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π /give <–∑–Ω–∞—á–µ–Ω–Ω—è> —É –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è")
            return

        try:
            value = int(parts[1])
            if value <= 0:
                raise ValueError
            
        except ValueError:
            await message.reply("ü§® –¢–∏–ø–æ —Ä–æ–∑—É–º–Ω–∏–π? –í–≤–µ–¥–∏ –ø–æ–∑–∏—Ç–∏–≤–Ω–µ —á–∏—Å–ª–æ")
            return

        giver_id = message.from_user.id
        receiver_id = message.reply_to_message.from_user.id
        chat_id = message.chat.id
        now = datetime.now()

        cursor.execute('SELECT command FROM user_cooldowns WHERE user_id = ? AND chat_id = ? AND command IS NOT NULL', 
                       (giver_id, chat_id))
        last_given = cursor.fetchone()

        if last_given:
            last_given = datetime.strptime(last_given[0], '%Y-%m-%d %H:%M:%S.%f')
            if last_given + timedelta(hours=12) > now:
                cooldown_time = (last_given + timedelta(hours=12)) - now
                cooldown_time = str(cooldown_time).split('.')[0]
                await message.reply(f"‚ÑπÔ∏è –¢–∏ —â–µ –Ω–µ –º–æ–∂–µ—à –ø–µ—Ä–µ–¥–∞—Ç–∏ —Ä—É—Å–æ—Ñ–æ–±—ñ—é. –°–ø—Ä–æ–±—É–π —á–µ—Ä–µ–∑ {cooldown_time}")
                return

        cursor.execute('UPDATE user_cooldowns SET command = ? WHERE user_id = ? AND chat_id = ?', 
                       (str(now), giver_id, chat_id))
        conn.commit()

        cursor.execute('SELECT value FROM user_values WHERE user_id = ? AND chat_id = ?', (giver_id, chat_id))
        result = cursor.fetchone()
        if not result or result[0] < value:
            await message.reply(f"üòØ –£ —Ç–µ–±–µ {result[0] if result else 0} –∫–≥. –¶—å–æ–≥–æ –Ω–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ")
            return

        cursor.execute('UPDATE user_values SET value = value - ? WHERE user_id = ? AND chat_id = ?', 
                       (value, giver_id, chat_id))
        cursor.execute('INSERT INTO user_values (user_id, chat_id, value) VALUES (?, ?, ?) ON CONFLICT(user_id, chat_id) DO UPDATE SET value = value + ?', 
                       (receiver_id, chat_id, value, value))
        conn.commit()

        # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Ä—É—Å–æ—Ñ–æ–±–∏–∏ –¥–∞—Ä–∏—Ç–µ–ª—è
        cursor.execute('SELECT value FROM user_values WHERE user_id = ? AND chat_id = ?', (giver_id, chat_id))
        updated_benis = cursor.fetchone()[0]

        await message.reply(f"‚úÖ –¢–∏ –ø–µ—Ä–µ–¥–∞–≤ {value} –∫–≥ —Ä—É—Å–æ—Ñ–æ–±—ñ—ó @{message.reply_to_message.from_user.username if message.reply_to_message.from_user.username else message.reply_to_message.from_user.first_name}. –ó–∞–ª–∏—à–æ–∫: {updated_benis} –∫–≥.")
    else:
        await message.reply("‚öôÔ∏è –î—ñ–ª–∏—Ç–∏—Å—è —Ä—É—Å–æ—Ñ–æ–±—ñ—î—é –ø–æ—Ç—Ä—ñ–±–Ω–æ —É –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è")

#/top10-----
@dp.message_handler(commands=['top10'])
async def show_top_benis(message: types.Message):
    chat_id = message.chat.id
    cursor.execute('SELECT user_id, value FROM user_values WHERE chat_id = ? ORDER BY value DESC LIMIT 10', (chat_id,))
    results = cursor.fetchall()

    if len(results) == 0:
        await message.reply('üòØ–©–µ –Ω—ñ—Ö—Ç–æ –Ω–µ –≥—Ä–∞–≤')
        return

    async def fetch_username(user_id):
        return await get_user_info(message.chat.id, user_id)

    tasks = [fetch_username(user_id) for user_id, _ in results]
    user_names = await asyncio.gather(*tasks)

    message_text = 'üìä–¢–æ–ø —Ä—É—Å–æ—Ñ–æ–±—ñ–π:\n'
    for i, (user_name, (user_id, benis)) in enumerate(zip(user_names, results)):
        if user_name:
            message_text += f'{i+1}. <a href="https://t.me/{user_name}">{user_name}</a>: {benis} –∫–≥\n'

    await message.reply(message_text, parse_mode=ParseMode.HTML, disable_web_page_preview=True)

#/top-----
@dp.message_handler(commands=['top'])
async def show_top_benis(message: types.Message):
    chat_id = message.chat.id
    cursor.execute('SELECT user_id, value FROM user_values WHERE chat_id = ? ORDER BY value DESC LIMIT 100', (chat_id,))
    results = cursor.fetchall()

    if len(results) == 0:
        await message.reply('üòØ–©–µ –Ω—ñ—Ö—Ç–æ –Ω–µ –≥—Ä–∞–≤')
        return

    async def fetch_username(user_id):
        return await get_user_info(message.chat.id, user_id)

    tasks = [fetch_username(user_id) for user_id, _ in results]
    user_names = await asyncio.gather(*tasks)

    message_text = 'üìä–¢–æ–ø —Ä—É—Å–æ—Ñ–æ–±—ñ–π:\n'
    for i, (user_name, (user_id, benis)) in enumerate(zip(user_names, results)):
        if user_name:
            message_text += f'{i+1}. <a href="https://t.me/{user_name}">{user_name}</a>: {benis} –∫–≥\n'

    await message.reply(message_text, parse_mode=ParseMode.HTML, disable_web_page_preview=True)

#/edit-----
@dp.message_handler(commands=['edit'])
async def edit_benis(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        return

    try:
        parts = message.text.split()
        user_id = None
        
        if message.reply_to_message:
            user_id = message.reply_to_message.from_user.id
            if len(parts) != 2:
                raise ValueError("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π /edit <value>")
            value = int(parts[1])
        else:
            if len(parts) != 3:
                raise ValueError("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π /edit <user_id> <value>")
            user_id = int(parts[1])
            value = int(parts[2])

        cursor.execute('SELECT value FROM user_values WHERE user_id = ?', (user_id,))
        result = cursor.fetchone()

        if result is None:
            cursor.execute('INSERT INTO user_values VALUES (?, ?)', (user_id, value))
        else:
            cursor.execute('UPDATE user_values SET value = ? WHERE user_id = ?', (value, user_id))

        conn.commit()
        await message.reply(f"üö®–ó–Ω–∞—á–µ–Ω–Ω—è {user_id} –±—É–ª–æ –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞ {value} –∫–≥")
    except ValueError as e:
        await message.reply(str(e))

#/statareset-----
@dp.message_handler(commands=['statareset'])
async def reset_user_value(message: types.Message):
    admin_id = ADMIN_ID

    if message.from_user.id == admin_id and message.reply_to_message:
        user_id = message.reply_to_message.from_user.id
        cursor.execute('UPDATE user_values SET value = 0 WHERE user_id = ?', (user_id,))
        conn.commit()
        await message.reply(f"üì°–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ {user_id} –æ–±–Ω—É–ª–µ–Ω–∞")
    elif message.from_user.id != admin_id and not message.reply_to_message:
        user_id = message.from_user.id
        cursor.execute('UPDATE user_values SET value = 0 WHERE user_id = ?', (user_id,))
        conn.commit()
        await message.reply("üì°–¢–≤–æ—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ–±–Ω—É–ª–µ–Ω–æ")
    else:
        await message.reply("üì°–ö–æ–≥–æ –∫–∞—Ä–∞—î–º–æ?")

#/start-----
@dp.message_handler(commands=['start'])
async def send_message(message: types.Message):
    add_chat(message.chat.id)
    await message.reply("ü´°–ü—Ä–∏–≤—ñ—Ç. –Ø –±–æ—Ç –¥–ª—è —Ä–æ–∑–≤–∞–≥\n–í–∏–≤—á–∞–π /help")

#/game-----
@dp.message_handler(commands=['game'])
async def send_message(message: types.Message):
    await message.reply("üéÆ*–†–æ–∑–≤–∏–≤–∞–π —Å–≤–æ—é —Ä—É—Å–æ—Ñ–æ–±—ñ—é. –ó—Ä–æ—Å—Ç–∞–π —ó—ó —â–æ–¥–Ω—è, —ñ –∑–º–∞–≥–∞–π—Å—è –∑ –¥—Ä—É–∑—è–º–∏*"+
        "\n\n*/killru* ‚Äî _–°–ø—Ä–æ–±—É–≤–∞—Ç–∏ –ø—ñ–¥–≤–∏—â–∏—Ç–∏ —Å–≤–æ—é —Ä—É—Å–æ—Ñ–æ–±—ñ—é._"+
        "\n*/my* ‚Äî _–ú–æ—è —Ä—É—Å–æ—Ñ–æ–±—ñ—è._"+
        "\n*/give* ‚Äî _–ü–æ–¥—ñ–ª–∏—Ç—å—Å—è —Ä—É—Å–æ—Ñ–æ–±—ñ—î—é._"+
        "\n*/top10* ‚Äî _–¢–æ–ø 10 –≥—Ä–∞–≤—Ü—ñ–≤._"+
        "\n*/top* ‚Äî _–¢–æ–ø –≥—Ä–∞–≤—Ü—ñ–≤._"+
        "\n*/statareset* ‚Äî _–°–∫–∏–Ω—É—Ç–∏ –º–æ—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É._", parse_mode="Markdown")

#/secret-----
@dp.message_handler(commands=['secret'])
async def send_message(message: types.Message):
    add_chat(message.chat.id)
    await message.reply("–ë–æ—Ç —Å—Ç–≤–æ—Ä—é–≤–∞–≤—Å—è —Å–ø–æ—á–∞—Ç–∫—É –¥–ª—è –±–∞–π—Ç–∞ —é–∑–µ—Ä—ñ–≤ —É —á–∞—Ç—ñ. –ù–æ—É–Ω–µ–π–º–∏ –∑–∞—Ö–æ–¥–∏–ª–∏ –≤ —á–∞—Ç —ñ —Ç–∏–∫–∞–ª–∏ –≤—ñ–¥—Ä–∞–∑—É –∫–æ–º–∞–Ω–¥—É, –ø—ñ—Å–ª—è —Ü—å–æ–≥–æ –≤ —á–∞—Ç—ñ –Ω—ñ–∫–æ–ª–∏ –Ω–µ –∑'—è–≤–ª—è–ª–∏—Å—è. –í–∏—Ä—ñ—à–∏–≤ –∑—Ä–æ–±–∏—Ç–∏ –±–∞–π—Ç –∫–æ–º–∞–Ω–¥–∏, —è–∫—ñ –∫–∏–∫–∞—é—Ç—å —Ç–∞–∫–∏—Ö \"—ñ–Ω–¥–∏–≤—ñ–¥—É—É–º—ñ–≤\". –í—Å–µ —â–æ –≤ /bluetext —ñ /roulet –ø—Ä–æ—Å—Ç–æ –∫–∏–∫–∞—î —É—á–∞—Å–Ω–∏–∫—ñ–≤. –©–µ —î /kekmi —è–∫–∞ —Ç–µ–∂ –∫–∏–∫–∞—î –∑ —á–∞—Ç—É", parse_mode="Markdown")

#/help-----
@dp.message_handler(commands=['help'])
async def send_message(message: types.Message):
    await message.reply("‚öôÔ∏è*–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥:*"+
    "\n\n*/start* ‚Äî _–∑–∞–ø—É—Å—Ç–∏—Ç–∏ –±–æ—Ç–∞._"+
    "\n*/help* ‚Äî _—Ü–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è._"+
    "\n*/bluetext* ‚Äî _—Å–∏–Ω—ñ–π —Ç–µ–∫—Å—Ç._"+
    "\n*/secret* ‚Äî _–Ω–µ —Ä–æ–∑–ø–æ–≤—ñ–¥–∞–π –Ω—ñ–∫–æ–º—É._"+
    "\n*/id* ‚Äî _–ü–æ–∫–∞–∑—É—î —Ç–≤—ñ–π ID, —è–∫—â–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, —Ç–æ –π–æ–≥–æ. –î–æ–ø–∏—à–∏_ `chat`_, —ñ –ø–æ–∫–∞–∂–µ ID —á–∞—Ç—É._"+
    "\n\nüéÆ–ì—Ä–∞ –≤–∏–∫–ª—é—á–Ω–æ –¥–ª—è —É–∫—Ä–∞—ó–Ω—Ü—ñ–≤. –ó–æ–º–±—ñ –∑ –±–æ–ª—ñ—Ç —Ç–µ–∂ –º–æ–∂–Ω–∞, –∞–ª–µ –∑–≤–æ—Ä–æ—Ç–Ω–æ–≥–æ —à–ª—è—Ö—É –Ω–µ –±—É–¥–µ"+
    "\n*/game* ‚Äî _–ø—Ä–æ –≥—Ä—É._"+
    "\n\nü§≠*–Ü —Ç–µ, –∑–∞—Ä–∞–¥–∏ —á–æ–≥–æ —Å—Ç–≤–æ—Ä—é–≤–∞–≤—Å—è –±–æ—Ç.*"+
    "\n*/roulet* ‚Äî _—Å–ø–∏—Å–æ–∫ —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤._", parse_mode="Markdown")

#/id-----
@dp.message_handler(commands=['id'])
async def command_id(message: types.Message):
    if message.reply_to_message:
        user_id = message.reply_to_message.from_user.id
        await message.reply(f"ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: `{user_id}`", parse_mode="Markdown")
    elif "chat" in message.text:
        chat_id = message.chat.id
        await message.reply(f"ID —á–∞—Ç—É: `{chat_id}`", parse_mode="Markdown")
    else:
        user_id = message.from_user.id
        await message.reply(f"–¢–≤—ñ–π ID: `{user_id}`", parse_mode="Markdown")

#/kickme-----
@dp.message_handler(commands=['kickme'])
async def send_message(message: types.Message):
    await message.reply("Rose, —Ç–≤–æ—è —á–µ—Ä–≥–∞üòÅ")

#/roulet-----
@dp.message_handler(commands=['roulet'])
async def send_message(message: types.Message):
    await message.reply("üöÄ*–ü—Ä–æ —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ:*"+
    "\n_–í–≤–µ–¥–∏ –∫–æ–º–∞–Ω–¥—É —Ç–∞ –æ—Ç—Ä–∏–º–∞–π —à–∞–Ω—Å –≤–∏–≥—Ä–∞—Ç–∏ –ø—Ä–∏–∑. –£ –∫–æ–∂–Ω–æ—ó –∫–æ–º–∞–Ω–¥–∏ —Å–≤—ñ–π –ø—Ä–∏–∑ —ñ —Å–≤–æ—ó —à–∞–Ω—Å–∏. –ù–µ –∑–∞–±—É–¥—å –¥–æ–¥–∞—Ç–∏ –º–µ–Ω–µ –≤ –≥—Ä—É–ø–æ–≤–∏–π —á–∞—Ç (—Ä–æ–∑—ñ–≥—Ä–∞—à—ñ –ø—Ä–∞—Ü—é—é—Ç—å —Ç—ñ–ª—å–∫–∏ —Ç–∞–º) —ñ –≤–∏–¥–∞—Ç–∏ –ø—Ä–∞–≤–∞ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞, —ñ–Ω–∞–∫—à–µ —è –Ω–µ –∑–º–æ–∂—É –ø—Ä–∞—Ü—é–≤–∞—Ç–∏üò¢_"+
    "\n\nü•≥Ô∏è*–°–ø–∏—Å–æ–∫ —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤:*"+
    "\n*/yadebil*"+
    "\n*–ü—Ä–∏–∑:* _–º–æ–∂–ª–∏–≤—ñ—Å—Ç—å –∑–∞–∫—Ä—ñ–ø–ª—é–≤–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è._"+
    "\n*–®–∞–Ω—Å:* _10%_"+
    "\n*/yagandone*"+
    "\n*–ü—Ä–∏–∑:* _–º–æ–∂–ª–∏–≤—ñ—Å—Ç—å –æ—Ç—Ä–∏–º–∞—Ç–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞._"+
    "\n*–®–∞–Ω—Å:* _5%_"+
    "\n*/yapedarasik*"+
    "\n*–ü—Ä–∏–∑:* _–º–æ–∂–ª–∏–≤—ñ—Å—Ç—å –æ—Ç—Ä–∏–º–∞—Ç–∏ —Ç–≤–æ—Ä—Ü—è._"+
    "\n*–®–∞–Ω—Å:* _1%_", parse_mode="Markdown")

async def kick_roulet_words(message: types.Message) -> bool:
    roulet_word = ["/yadebil","/yagandone", "/yapedarasik"]
    return any(keyword in message.text.lower() for keyword in roulet_word)

@dp.message_handler(kick_roulet_words)
async def kick_user(message: types.Message):
    user_id = message.from_user.id
    chat_id = message.chat.id

    try:
        await bot.kick_chat_member(chat_id, user_id)
        await bot.unban_chat_member(chat_id, user_id)
        await message.reply("üò¢*–ù–∞ –∂–∞–ª—å, —Ç–∏ –Ω–µ –≤–∏–≥—Ä–∞–≤.*\n_–°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑_", parse_mode="Markdown")
    except aiogram.exceptions.BadRequest:
        await message.reply("üöÄ*–¢–∏ –≤–∂–µ –æ—Ç—Ä–∏–º–∞–≤ —Ü–µ–π –ø—Ä–∏–∑!*", parse_mode="Markdown")

#/kicktext-----
@dp.message_handler(commands=['bluetext'])
async def send_message(message: types.Message):
    await message.reply("/BLUE /TEXT\n/MUST /CLICK\n/I /AM /A /STUPID /ANIMAL /THAT /ISS /ATTRACTED /TO /COLORS")

async def kick_words(message: types.Message) -> bool:
    words = ["—Å–ª–∞–≤–∞ —Ä–æ—Å—Å–∏–∏", "/kekmi","/blue", "/text", "/must", "/click", "/i", "/am", "/stupid", "/animal", "/that", "/iss", "/attracted", "/to", "/colors"]
    return any(keyword in message.text.lower() for keyword in words)

@dp.message_handler(kick_words)
async def kick_user(message: types.Message):
    user_id = message.from_user.id
    chat_id = message.chat.id

    try:
        await bot.kick_chat_member(chat_id, user_id)
        await bot.unban_chat_member(chat_id, user_id)
        await message.reply("ü´µüòÇ")
    except aiogram.exceptions.BadRequest:
        await None

if __name__ == '__main__':
    executor.start_polling(dp)
